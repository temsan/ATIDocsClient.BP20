
Перем мВалютаРегламентированногоУчета;

Перем ТипБулево;
Перем ТипСтрока;
Перем ТипЧисло;

Перем Сертификаты Экспорт;

Перем Отладка Экспорт;

Перем КлассификаторЕдиницИзмерения;

Функция ПолучитьСоздатьСвойство(НазначениеСвойства, ИмяСвойства, ТипЗначения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.Наименование = &ИмяСвойства
	|	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СвойствоОбъект = ПланыВидовХарактеристик.СвойстваОбъектов.СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяСвойства;
		СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
		СвойствоОбъект.ТипЗначения = ТипЗначения;
		СвойствоОбъект.Записать();
		Возврат СвойствоОбъект.Ссылка;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагента(Идентификатор, ИНН="", Наименование="") Экспорт
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ЗначенияСвойствОбъектов.Объект = Контрагенты.Ссылка
		|ГДЕ
		|	ЗначенияСвойствОбъектов.Свойство = &Свойство
		|	И ЗначенияСвойствОбъектов.Значение = &Значение
		|	И НЕ Контрагенты.Ссылка ЕСТЬ NULL ";
		
		НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		ИмяСвойства = "Код_АТИ";
		Свойство = ПолучитьСоздатьСвойство(НазначениеСвойства, ИмяСвойства, ТипЧисло);
		Запрос.УстановитьПараметр("Свойство", Свойство);
		Запрос.УстановитьПараметр("Значение", Идентификатор);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Возврат РезультатЗапроса.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ИНН = &ИНН";
		Запрос.УстановитьПараметр("ИНН", ИНН);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат РезультатЗапроса.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		Запрос.Текст=
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &Наименование
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления";
		Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование)+"%");
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат РезультатЗапроса.Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция НайтиДокументПоДокИД(ИмяТаблицы, Идентификатор) Экспорт
	
	Результат = Документы[ИмяТаблицы].ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ИмяТаблицы+" КАК Док
	|		ПО ЗначенияСвойствОбъектов.Объект = Док.Ссылка
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Свойство = &Свойство
	|	И ЗначенияСвойствОбъектов.Значение = &Значение
	|	И НЕ Док.Ссылка ЕСТЬ NULL ";
	
	Запрос.Текст = ТекстЗапроса;
	
	НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
	ИмяСвойства = "Код_АТИ";
	Свойство = ПолучитьСоздатьСвойство(НазначениеСвойства, ИмяСвойства, ТипСтрока);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Значение", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
	    Результат = Выборка.Ссылка;
		
	Иначе
		
		//Идентификатор = СтрЗаменить(Сред(Идентификатор, 1, 36), "-", "");
		//Идентификатор = Сред(Идентификатор, 1, 8)+"-"+Сред(Идентификатор, 9, 4)+"-"+Сред(Идентификатор, 13, 4)+"-"+Сред(Идентификатор, 17, 4)+"-"+Сред(Идентификатор, 21);
		//
		//UID = Новый УникальныйИдентификатор(Сред(Идентификатор, 1, 36));
		//Если ЗначениеЗаполнено(UID) Тогда
		//	
		//	Попытка
		//		Результат = Документы[ИмяТаблицы].ПолучитьСсылку(UID);
		//	Исключение
		//	КонецПопытки;
		//	
		//КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруИдентификатора(Знач ID, Разделитель = "_") Экспорт
	
	СтруктураИдентификатора = Новый Структура;
	ПозицияРазделителя = Найти(ID, Разделитель);
	Если ПозицияРазделителя>0 Тогда
		Префикс = Лев(ID, ПозицияРазделителя-1);
		ID = Сред(ID, ПозицияРазделителя+СтрДлина(Разделитель));
	Иначе
		Префикс = "";
	КонецЕсли;
	СтруктураИдентификатора.Вставить("Префикс", Префикс);
	
	ПозицияРазделителя = Найти(ID, Разделитель);
	Если ПозицияРазделителя>0 Тогда
		ID = Лев(ID, ПозицияРазделителя);
		ВерсияДанных = Сред(ID, ПозицияРазделителя+СтрДлина(Разделитель));
		ID = Лев(ID, СтрДлина(ID) - СтрДлина(Разделитель));
	Иначе
		ВерсияДанных = "";
	КонецЕсли;
	СтруктураИдентификатора.Вставить("ВерсияДанных", ВерсияДанных);
	СтруктураИдентификатора.Вставить("ID", ID);
	
	Возврат СтруктураИдентификатора;
	
КонецФункции

Функция ЗаменитьСимволы (Источник,Текст,Замена)
	Результат = Текст;
	Для Сч = 1 По СтрДлина(Источник) Цикл
		Результат = СтрЗаменить(Результат,Сред(Источник,Сч,1),Сред(Замена,Сч,1));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СтрокаВЧисло(Знач ИсходнаяСтрока) Экспорт
	ИсходнаяСтрока = СокрЛП(ИсходнаяСтрока);
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Или КодСимвола = 40 Тогда // Минус или открывающая скобка.
			Если Результат <> 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 41 Тогда // Закрывающая скобка.
			Если Не ЗнакОтрицательный Или Результат = 0 Тогда // Не было открывающей скобки или нет числа.
				Возврат Неопределено;
			КонецЕсли;
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				Возврат Неопределено; // Разделитель уже был, следовательно это не число.
			КонецЕсли;
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция Транслитерация(ИсходноеСлово)
	Слово = НРег(ИсходноеСлово);
	Слово=СтрЗаменить(Слово,"её","yeyo");
	Слово=СтрЗаменить(Слово,"ёе","yoye");
	Слово=СтрЗаменить(Слово,"я","ya");
	Слово=СтрЗаменить(Слово," - ","-");
	Слово=СтрЗаменить(Слово," -","-");
	Слово=СтрЗаменить(Слово,"- ","-");
	Слово=СтрЗаменить(Слово," ","-");
	Слово=ЗаменитьСимволы("абвгдезийклмнопрстуфыэ",Слово,"abvgdezijklmnoprstufye");
	Возврат Слово;
КонецФункции

Функция ПреобразоватьАлфавит(Знач ВхСтрока) Экспорт
	
	Результат = "";
	Для Инд = 1 По СтрДлина(ВхСтрока) Цикл
		
		Символ = Сред(ВхСтрока, Инд, 1);
		КодСимвола = КодСимвола(Символ);
		Если (КодСимвола >= 65 И КодСимвола <= 122)
			ИЛИ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Результат = Результат + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Навигация по дереву разбора

Функция ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ПолучитьСсылкуРеквизита(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
		
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ПутьКРеквизиту, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		СтрокаПоСсылке = Неопределено;
		Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
			Возврат СтрокаПоСсылке.СсылкаНаОбъект;
		КонецЕсли;
		
		// Нет возможности получить значение подчиненного реквизита.
		Возврат Неопределено;
		
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ XML ИЗ ДОКУМЕНТОВ 1С

Функция СформироватьДокумент1С(ДокументСсылка, ОтправлятьПечатнуюФорму, ДопПараметры = Неопределено) Экспорт
	
	Перем ТипДокумента;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("ТипДокумента", ТипДокумента);
	КонецЕсли;
	
	Если ОтправлятьПечатнуюФорму Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Если ТипДокумента = "накладная" Тогда
				
				Возврат ВыгрузитьТОРГ12(ДокументСсылка, ?(ФормироватьЭД, Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), Неопределено));
				
			Иначе
				
				Возврат ВыгрузитьАкт(ДокументСсылка, ?(ФормироватьЭД, Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), Неопределено));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	
			
			Возврат ВыгрузитьСчетФактуру(ДокументСсылка, ДопПараметры)
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
			
			Возврат ВыгрузитьСчет(ДокументСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции
	
Функция ВернутьРасчетныйСчет(СчетКонтрагента)

	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;

КонецФункции // ВернутьРасчетныйСчет()

Функция ВыгрузитьАкт(ДокументСсылка, ЭДСсылка = Неопределено) Экспорт
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);

	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ДокументСсылка.Организация.ИНН);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ДокументСсылка.Контрагент.ИНН);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	НастройкиОбменаЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);
	
	СтруктураПараметров = ЭлектронныеДокументыВнутренний.СформироватьАкт501ИсполнительФНС(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	Если НЕ ЭДСсылка = Неопределено Тогда
		//Переделать на процедуры ОМ..
		СтруктураЭД = СтруктураПараметров.СтруктураЭД;
		Если НЕ ЗначениеЗаполнено(ЭДСсылка) Тогда
			ЭДОбъект = Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
		Иначе
			ЭДОбъект = ЭДСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭДОбъект, СтруктураЭД);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		ЭДОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.ВладелецФайла = ДокументСсылка;
		ЭДОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаМодификацииУниверсальная = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаСоздания = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаФормированияЭДОтправителем = ТекущаяДатаСеанса;
		ЭДОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.Наименование = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.НаименованиеФайла = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.Наименование = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.ПутьКФайлу = СтруктураПараметров.ПолноеИмяФайла;
		ЭДОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
		ЗапросСоглашение = Новый Запрос;
		ЗапросСоглашение.Текст=
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
		//|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = &СтатусСоглашения";
		ЗапросСоглашение.УстановитьПараметр("Контрагент", ДокументСсылка.Контрагент);
		ЗапросСоглашение.УстановитьПараметр("Организация", ДокументСсылка.Организация);
		ЗапросСоглашение.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
		РезультатЗапроса = ЗапросСоглашение.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЭДОбъект.СоглашениеЭД = РезультатЗапроса.Выгрузить()[0].Ссылка;
		КонецЕсли;
		
		//ЭДОбъект.ФайлХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		ЭДОбъект.Записать();
		
		МЗ = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
		МЗ.ПрисоединенныйФайл = ЭДОбъект.Ссылка;
		МЗ.ХранимыйФайл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		МЗ.Записать();
		
		ЭДСсылка = ЭДОбъект.Ссылка;
		//ПрисоединенныеФайлы.ДобавитьФайл();
	КонецЕсли;
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
	
КонецФункции

Функция ВыгрузитьСчетФактуру(ДокументСсылка, ДопПараметры = Неопределено) Экспорт
	
	Перем ИдентификаторОрганизации;
	Перем ИдентификаторКонтрагента;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("ИдентификаторОрганизации", ИдентификаторОрганизации);
		ДопПараметры.Свойство("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторОрганизации) Тогда
		ВызватьИсключение "Не заполнен ФНС ИД отправителя";
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторКонтрагента) Тогда
		ВызватьИсключение "Не заполнен ФНС ИД получателя";
	КонецЕсли;
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	
	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетФактура);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	
	СтруктураПараметров = ЭлектронныеДокументыВнутренний.СформироватьСчетФактуруФНС(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	// В модуле ЭлектронныеДокументыВнутренний часть параметров забиты харкодом
	// Исправим это
	
	//Объект.Установить("/СвУчДокОбор/СвОЭДОтпр/НаимОрг", "ЗАО ""ПФ ""СКБ Контур""");
	//Объект.Установить("/СвУчДокОбор/СвОЭДОтпр/ИННЮЛ", "6663003127");
	//Объект.Установить("/СвУчДокОбор/СвОЭДОтпр/ИдЭДО", "2BM");
	
	// NEW
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(СтруктураПараметров.ПолноеИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	ОбъектXML = Неопределено;
	
	// Получим тег Подписант для обработки.
	Сведения = ДокументDOM.ПолучитьЭлементыПоИмени("СвОЭДОтпр")[0];
	
	Сведения.УстановитьАтрибут("НаимОрг", "ЗАО ""ПФ ""СКБ Контур""");
	Сведения.УстановитьАтрибут("ИННЮЛ", "6663003127");
	Сведения.УстановитьАтрибут("ИдЭДО", "2BM");

	// Удалим сведения в XML
	
	//Файл/Документ/СвСчФакт/ИнфПол
	
	ИнфПол = ДокументDOM.ПолучитьЭлементыПоИмени("ИнфПол")[0];
	ИнфПол.УдалитьАтрибут("ТекстИнф");
	
	Для Инд = 0 По ИнфПол.ДочерниеУзлы.Количество()-1 Цикл
		ИнфПол.УдалитьДочерний(ИнфПол.ДочерниеУзлы[0])		
	КонецЦикла;
	
	КоллекцияИнфПолСтр = ДокументDOM.ПолучитьЭлементыПоИмени("СведТов");
	Для Каждого Элемент Из КоллекцияИнфПолСтр Цикл
		Элемент.УдалитьАтрибут("ИнфПолСтр");
		
		Коллекция = Элемент.ПолучитьЭлементыПоИмени("ИнфПолСтр");
		Для Каждого Элем Из Коллекция Цикл
			Элемент.УдалитьДочерний(Элем);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(СтруктураПараметров.ПолноеИмяФайла, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
		
КонецФункции



Функция ВыгрузитьСчет(ДокументСсылка, ЭДСсылка = Неопределено) Экспорт
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);

	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ДокументСсылка.Организация.ИНН);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ДокументСсылка.Контрагент.ИНН);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	НастройкиОбменаЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);
	
	СтруктураПараметров = ПолучитьФорму("БП30").УдалитьСформироватьСчетНаОплатуПоДокументу(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
	
КонецФункции

Функция СформироватьФайлЗаявки(ВхДанные) Экспорт
	
	ФайлЗаявки = ПолучитьИмяВременногоФайла("xml");
	ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаЗаявки");
	Макет.Записать(ФайлСхемы);
	
	Фабрика = СоздатьФабрикуXDTO(ФайлСхемы);
	ПакетATI = Фабрика.Пакеты.Получить("http://d.ati.su/xml/ns/0.1/");
	
	ДокументОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ПакетATI, "document");
	ДокументОбъектXDTO.type = "Заказ";
	ДокументОбъектXDTO.version = "0.1";
	ДокументОбъектXDTO.id = Строка(Новый УникальныйИдентификатор);
	
	ЗаголовокОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "header");
	ЗаголовокОбъектXDTO.number = ВхДанные.Номер;
	ЗаголовокОбъектXDTO.title = ВхДанные.ТипДокумента;
	ЗаголовокОбъектXDTO.date = ВхДанные.Дата;
	
	ДокументОбъектXDTO.header = ЗаголовокОбъектXDTO;
	
	///////////////////////////////////////////////////////////////////////////
	ТелоОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "body");
	
	Если ЗначениеЗаполнено(ВхДанные.Договор) Тогда
		//ТелоОбъектXDTO.relation.Добавить("К договору №"+ВхДанные.Договор.Номер+" от "+Формат(ВхДанные.Договор.Дата, "ДЛФ=DD"));
		ТелоОбъектXDTO.relation = "К договору №"+ВхДанные.Договор.Номер+" от "+Формат(ВхДанные.Договор.Дата, "ДЛФ=DD");
	КонецЕсли;
	
	//ТекстЗаказчик = "";
	//ТекстИсполнитель = "";
	//Если ВхДанные.РольКонтрагента = 1 Тогда //Заказчик
	//	ТекстЗаказчик = "***CN_begin***"+ВхДанные.Контрагент.Наименование+"***CN_end***" + ", именуемое в дальнейшем Заказчик ";
	//	Если ЗначениеЗаполнено(ВхДанные.ПредставительКонтрагента) Тогда
	//		ТекстЗаказчик = ТекстЗаказчик + " в лице "+ВхДанные.ПредставительКонтрагента;
	//		Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяКонтрагента) Тогда
	//			ТекстЗаказчик = ТекстЗаказчик + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяКонтрагента;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ТекстИсполнитель = "***CN_begin***"+ВхДанные.Организация.Наименование+"***CN_end***" + ", именуемое в дальнейшем Перевозчик";
	//	Если ЗначениеЗаполнено(ВхДанные.ПредставительОрганизации) Тогда
	//		ТекстИсполнитель = ТекстИсполнитель + " в лице "+ВхДанные.ПредставительОрганизации;
	//		Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяОрганизации) Тогда
	//			ТекстИсполнитель = ТекстИсполнитель + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяОрганизации;
	//		КонецЕсли;
	//	КонецЕсли;
	//Иначе //Исполнитель
	//	ТекстЗаказчик = "***CN_begin***"+ВхДанные.Организация.Наименование+"***CN_end***" + ", именуемое в дальнейшем Заказчик";
	//	Если ЗначениеЗаполнено(ВхДанные.ПредставительОрганизации) Тогда
	//		ТекстЗаказчик = ТекстЗаказчик + " в лице "+ВхДанные.ПредставительОрганизации;
	//		Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяОрганизации) Тогда
	//			ТекстЗаказчик = ТекстЗаказчик + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяОрганизации;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	ТекстИсполнитель = "***CN_begin***"+ВхДанные.Контрагент.Наименование+"***CN_end***" + ", именуемое в дальнейшем Перевозчик";
	//	Если ЗначениеЗаполнено(ВхДанные.ПредставительКонтрагента) Тогда
	//		ТекстИсполнитель = ТекстИсполнитель + " в лице "+ВхДанные.ПредставительКонтрагента;
	//		Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяКонтрагента) Тогда
	//			ТекстИсполнитель = ТекстИсполнитель + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяКонтрагента;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//ТекстЗаказчик = ТекстЗаказчик + " с одной стороны, и ";
	//ТекстИсполнитель = ТекстИсполнитель + " с другой стороны , подписали настоящий заказ на выполнение перевозки груза на следующих условиях:";
	//
	//РазделОбъектXDTO.para.Добавить(ТекстЗаказчик);
	//РазделОбъектXDTO.para.Добавить(ТекстИсполнитель);
	//
	//ТелоОбъектXDTO.Section.Добавить(РазделОбъектXDTO);
	
	//ТелоОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "body");
	
	///////////////////////////////////////////////////////////////////////////
	
	МаршрутОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "route");
	МаршрутОбъектXDTO.Path = "";
	Для Каждого ТочкаМаршрута Из ВхДанные.ТочкиМаршрута Цикл
		МаршрутОбъектXDTO.Path = МаршрутОбъектXDTO.Path + ТочкаМаршрута.Действие + "(" + ТочкаМаршрута.Город + ") - ";
	КонецЦикла;
	
	Если СтрДлина(МаршрутОбъектXDTO.Path)>3 Тогда
		МаршрутОбъектXDTO.Path = Лев(МаршрутОбъектXDTO.Path, СтрДлина(МаршрутОбъектXDTO.Path)-3);
	КонецЕсли;
	
	Для Каждого ТочкаМаршрута Из ВхДанные.ТочкиМаршрута Цикл
		
		МестоОбъект = ПолучитьОбъектXDTO(Фабрика, МаршрутОбъектXDTO, "location");
		ДействиеОбъект = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "action");
		ДействиеОбъект.method = ТочкаМаршрута.Вид;
		ДействиеОбъект.__content = ТочкаМаршрута.Действие;
		МестоОбъект.action = ДействиеОбъект;
		
		АдресОбъект = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "address");
		АдресОбъект.City = ТочкаМаршрута.Город;
		АдресОбъект.Locality = ТочкаМаршрута.Адрес;
		АдресОбъект.latitude = ТочкаМаршрута.Широта;
		АдресОбъект.longitude = ТочкаМаршрута.Долгота;
		
		МестоОбъект.address = АдресОбъект;
		
		Агент = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "agent");
		
		Если ТочкаМаршрута.Действие = "Погрузка" Тогда
			Агент.Role = "Грузоотправитель";
		Иначе
			Агент.Role = "Грузополучатель";
		КонецЕсли;
		
		Агент.Title = ТочкаМаршрута.Контрагент.НаименованиеПолное;
		Агент.Contact = ТочкаМаршрута.КонтактноеЛицо;
		
		МестоОбъект.agent = Агент;
		МестоОбъект.date = ТочкаМаршрута.Дата;
		МестоОбъект.time = ТочкаМаршрута.Время;
		МестоОбъект.duration = ТочкаМаршрута.Продолжительность;
		
		ГрузыXDTO = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "list");
		ГрузыXDTO.role = "Грузы";
		
		Отбор = Новый Структура;
		Отбор.Вставить("uid_ТочкиМаршрута", ТочкаМаршрута.uid);
		ГрузыВТочке = ВхДанные.Грузы.НайтиСтроки(Отбор);
		
		Для Каждого СтрГруз Из ГрузыВТочке Цикл
			Груз = ПолучитьОбъектXDTO(Фабрика, ГрузыXDTO, "cargo");
			Груз.name = СтрГруз.ГрузНаименование;
			Груз.amount = СтрГруз.Количество;
			Груз.package = СтрГруз.Упаковка.Наименование;
			
			Размеры = ПолучитьОбъектXDTO(Фабрика, Груз, "dimensions");
			Размеры.unit = "м";
			Размеры.__content = Формат(СтрГруз.Длина, "ЧН=0")+"/"+Формат(СтрГруз.Ширина, "ЧН=0")+"/"+Формат(СтрГруз.Высота, "ЧН=0");
			Груз.dimensions = Размеры;
			
			Объем = ПолучитьОбъектXDTO(Фабрика, Груз, "Volume");
			Объем.unit = "куб. м";
			Объем.__content = СтрГруз.Объем;
			Груз.volume = Объем;
			
			Вес = ПолучитьОбъектXDTO(Фабрика, Груз, "Weight");
			Вес.unit = "т";
			Вес.__content = СтрГруз.Вес;
			Груз.Weight = Вес;
			
			Груз.cost = СтрГруз.Стоимость;
			
			Груз.requirements = СтрГруз.ОсобыеТребования;
			
			ГрузыXDTO.Cargo.Добавить(Груз);
		КонецЦикла;
		
		МестоОбъект.List = ГрузыXDTO;
		
		МаршрутОбъектXDTO.Location.Добавить(МестоОбъект);
		
	КонецЦикла;
	
	ТелоОбъектXDTO.route = МаршрутОбъектXDTO;
	
	//////////////////////////////////////////////////////////////////////////
	
	ТранспортОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "transport");
	ВодителиОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "drivers");
	
	ТребованияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТранспортОбъектXDTO, "requirements");
	ГрузоподъемностьОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТребованияОбъектXDTO, "Capacity");
	ГрузоподъемностьОбъектXDTO.unit = "тонн"; //???
	ГрузоподъемностьОбъектXDTO.__content = ВхДанные.Грузоподъемность;
	
	ТребованияОбъектXDTO.Capacity = ГрузоподъемностьОбъектXDTO;
	
	ТребованияОбъектXDTO.type = ?(ЗначениеЗаполнено(ВхДанные.ТипКузова), ВхДанные.ТипКузова, "");
	
	ОпцииОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТребованияОбъектXDTO, "Options");
	Если ВхДанные.TIR Тогда
		ОпцииОбъектXDTO.option.Добавить("TIR");
	КонецЕсли;	
	Если ВхДанные.CMR Тогда
		ОпцииОбъектXDTO.option.Добавить("CMR");
	КонецЕсли;	
	Если ВхДанные.T1 Тогда
		ОпцииОбъектXDTO.option.Добавить("T1");
	КонецЕсли;	
	Если ВхДанные.СанКнижкаТС Тогда
		ОпцииОбъектXDTO.option.Добавить("Сан. книжка ТС");
	КонецЕсли;	
	Если ВхДанные.МедКнижкаВодителя Тогда
		ОпцииОбъектXDTO.option.Добавить("Мед. книжка водителя");
	КонецЕсли;	
	ТребованияОбъектXDTO.options = ОпцииОбъектXDTO;
	
	ТребованияОбъектXDTO.notes = ВхДанные.Примечание;
	
	ТранспортОбъектXDTO.requirements = ТребованияОбъектXDTO;
	
	ТСОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТранспортОбъектXDTO, "List");
	Для Каждого СтрТранспорт Из ВхДанные.Транспорт Цикл
		
		СцепкаОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТСОбъектXDTO, "Vehicle");
		
		ТягачОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, СцепкаОбъектXDTO, "Tractor");
		ПрицепОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, СцепкаОбъектXDTO, "Trailer");
		
		ТягачОбъектXDTO.Brand = СтрТранспорт.МаркаТягача;
		ТягачОбъектXDTO.Model = СтрТранспорт.МодельТягача;
		ТягачОбъектXDTO.RegNum = СтрТранспорт.РегНомерТягача;
		
		ПрицепОбъектXDTO.Brand = СтрТранспорт.МаркаПрицепа;
		ПрицепОбъектXDTO.Model = СтрТранспорт.МодельПрицепа;
		ПрицепОбъектXDTO.RegNum = СтрТранспорт.РегНомерПрицепа;
		
		СцепкаОбъектXDTO.Tractor = ТягачОбъектXDTO;
		СцепкаОбъектXDTO.Trailer = ПрицепОбъектXDTO;
		
		ТСОбъектXDTO.Vehicle.Добавить(СцепкаОбъектXDTO);
		
	КонецЦикла;
	ТранспортОбъектXDTO.List = ТСОбъектXDTO;
	
	ТелоОбъектXDTO.transport = ТранспортОбъектXDTO;
	
	//СписокВодителейОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ВодителиОбъектXDTO, "List");
	Для Каждого СтрВодитель Из ВхДанные.Водители Цикл
		
		ВодительОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ВодителиОбъектXDTO, "Driver");
		
		ВодительОбъектXDTO.name = Строка(СтрВодитель.ФИО);
		ВодительОбъектXDTO.passport = СтрВодитель.Паспорт;
		ВодительОбъектXDTO.driverLicense = СтрВодитель.НомерВодительскогоУдостоверения;
		ВодительОбъектXDTO.mobile = СтрВодитель.Телефон;
		
		ВодителиОбъектXDTO.driver.Добавить(ВодительОбъектXDTO);
		
	КонецЦикла;
	//ВодителиОбъектXDTO.List = СписокВодителейОбъектXDTO;
	
	ТелоОбъектXDTO.drivers = ВодителиОбъектXDTO;
	
	//////////////////////////////////////////////////////////////////////////
	
	РазделОплата = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "payment");
	РазделОплата.header = "Оплата перевозки";
	
	//ОбщиеУсловияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, РазделОплата, "term");
	//ОбщиеУсловияОбъектXDTO.Condition = "Оплата перевозки";
	//ОбщиеУсловияОбъектXDTO.value = ВхДанные.ГрафикОплаты.Итог("Сумма");
	//
	//РазделОплата.Term.Добавить(ОбщиеУсловияОбъектXDTO);
	//
	//Для Каждого СтрГрафик Из ВхДанные.ГрафикОплаты Цикл
	//	
	//	УсловияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, РазделОплата, "term");
	//	УсловияОбъектXDTO.Condition = СтрГрафик.Комментарий;
	//	УсловияОбъектXDTO.value = Формат(СтрГрафик.Сумма, "ЧДЦ=2")+" "+ВхДанные.Валюта.Наименование+
	//	" ("+СтрГрафик.ФормаОплаты+?(ЗначениеЗаполнено(СтрГрафик.Примечание), ", "+СтрГрафик.Примечание, "")+")";
	//	
	//	РазделОплата.Term.Добавить(УсловияОбъектXDTO);
	//	
	//КонецЦикла;
	//
	//Если ЗначениеЗаполнено(ВхДанные.ОсобыеУсловияОплаты) Тогда
	//	РазделОплата.para.Добавить(ВхДанные.ОсобыеУсловияОплаты);
	//КонецЕсли;
	//
	
	ТелоОбъектXDTO.payment = РазделОплата;
	
	//////////////////////////////////////////////////////////////////////////
	
	РазделДопУсловие = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "additional");
	РазделДопУсловие.header = "Дополнительные условия";
//	РазделДопУсловие.term = ВхДанные.ДополнительныеУсловия;
	
	ТелоОбъектXDTO.additional = РазделДопУсловие;
	
	//////////////////////////////////////////////////////////////////////////
	
	РазделШтрафныеСанкции = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "penalties");
	РазделШтрафныеСанкции.header = "Штрафные санкции и ответственность";
	РазделШтрафныеСанкции.text = ВхДанные.ШтрафныеСанкцииИОтветственность;
	
	ТелоОбъектXDTO.penalties = РазделШтрафныеСанкции;
	
	//////////////////////////////////////////////////////////////////////////
	
	//РазделПрочее = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "section");
	//УсловияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, РазделПрочее, "term");
	//УсловияОбъектXDTO.__content = ВхДанные.Прочее;
	//РазделПрочее.Term.Добавить(УсловияОбъектXDTO);
	//
	//ТелоОбъектXDTO.Section.Добавить(РазделПрочее);
	
	//////////////////////////////////////////////////////////////////////////
	
	ДокументОбъектXDTO.body = ТелоОбъектXDTO;
	
	Агенты = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "agents");
	
	АгентКонтрагент = ПолучитьОбъектXDTO(Фабрика, Агенты, "agent");
	АгентОрганизация = ПолучитьОбъектXDTO(Фабрика, Агенты, "agent");
	
	//Если ВхДанные.РольКонтрагента = 1 Тогда
	//	АгентКонтрагент.role = "Заказчик";
	//	АгентОрганизация.role = "Перевозчик";
	//Иначе	
	//	АгентКонтрагент.role = "Перевозчик";
	//	АгентОрганизация.role = "Заказчик";
	//КонецЕсли;
	
	Если ВхДанные.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда //пока хотя бы так
		АгентКонтрагент.ownership = "ИП";
	Иначе
		АгентКонтрагент.ownership = "ООО";
	КонецЕсли;
	
	АгентОрганизация.ownership = "ООО";
	
	АгентКонтрагент.title = ВхДанные.Контрагент.НаименованиеПолное;
	АгентОрганизация.title = ВхДанные.Организация.НаименованиеПолное;
	
	КонтрагентЮрАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ВхДанные.Контрагент, "Юридический");
	КонтрагентФактАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ВхДанные.Контрагент, "Фактический");
	
	РеквизитыКонтрагента = "ИНН: "+ВхДанные.Контрагент.ИНН+Символы.ВК+";"+
	?(ЗначениеЗаполнено(ВхДанные.Контрагент.КПП), "КПП: "+ВхДанные.Контрагент.КПП+Символы.ПС+";","")+
	?(ЗначениеЗаполнено(КонтрагентЮрАдрес), "Юр. адрес: "+КонтрагентЮрАдрес+Символы.ВК+";","")+
	?(ЗначениеЗаполнено(КонтрагентФактАдрес), "Факт. адрес: "+КонтрагентФактАдрес+Символы.ВК+";","");
	
	АгентКонтрагент.requisites = РеквизитыКонтрагента;
	
	ОрганизацияЮрАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ВхДанные.Организация, "Юридический");
	ОрганизацияФактАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ВхДанные.Организация, "Фактический");
	
	РеквизитыОрганизации = "ИНН: "+ВхДанные.Организация.ИНН+Символы.ВК+";"+
	?(ЗначениеЗаполнено(ВхДанные.Организация.КПП), "КПП: "+ВхДанные.Организация.КПП+Символы.ПС+";","")+
	?(ЗначениеЗаполнено(ОрганизацияЮрАдрес), "Юр. адрес: "+ОрганизацияЮрАдрес+Символы.ПС+";","")+
	?(ЗначениеЗаполнено(ОрганизацияФактАдрес), "Факт. адрес: "+ОрганизацияФактАдрес+Символы.ПС+";","");
	
	АгентОрганизация.requisites = РеквизитыОрганизации;
	
	Агенты.agent.Добавить(АгентКонтрагент);
	Агенты.agent.Добавить(АгентОрганизация);
	
	ДокументОбъектXDTO.Agents = Агенты;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлЗаявки, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();    
	Фабрика.ЗаписатьXML(ЗаписьXML, ДокументОбъектXDTO, "document");
	
	ЗаписьXML.Закрыть();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", ФайлЗаявки);
	СтруктураДанных.Вставить("Контрагент", ВхДанные.Контрагент);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлЗаявки, "windows-1251");
	ЗаявкаТекст = ТекстовыйДокумент.ПолучитьТекст();
	ЗаявкаТекст = СтрЗаменить(ЗаявкаТекст, "***CN_begin***", "<cn>");
	ЗаявкаТекст = СтрЗаменить(ЗаявкаТекст, "***CN_end***", "</cn>");
	ЗаявкаТекст = СтрЗаменить(ЗаявкаТекст, "<__content>", "");
	ЗаявкаТекст = СтрЗаменить(ЗаявкаТекст, "</__content>", "");
	ТекстовыйДокумент.УстановитьТекст(ЗаявкаТекст);
	ТекстовыйДокумент.Записать(ФайлЗаявки, "windows-1251");
	
	Возврат СтруктураДанных;

КонецФункции

//Работа с XDTO
Функция ПолучитьОбъектXDTO(Фабрика, Владелец, Имя, ЗначениеСвойства = "") Экспорт
	
	Если ТипЗнч(Владелец) = Тип("ПакетXDTO") Тогда
        СвойствоXDTO = Владелец.КорневыеСвойства.Получить(Имя);
	ИначеЕсли ТипЗнч(Владелец) = Тип("ОбъектXDTO") Тогда
		СвойствоXDTO = Владелец.Свойства().Получить(Имя);	
    Иначе
        СвойствоXDTO = Владелец.Свойства.Получить(Имя);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
    ТипXDTO = СвойствоXDTO.Тип;
    Если  ТипЗнч(ТипXDTO) = Тип("ТипЗначенияXDTO") Тогда
        ОбъектXDTO = Фабрика.Создать(ТипXDTO, ЗначениеСвойства);
    Иначе
        ОбъектXDTO = Фабрика.Создать(ТипXDTO);
	КонецЕсли; 
	
    Возврат ОбъектXDTO;
	
КонецФункции

Функция ПолучитьСтруктуруЗаявки() Экспорт
	
	ТЗВодители = Новый ТаблицаЗначений;
	ТЗВодители.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("Паспорт", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("НомерВодительскогоУдостоверения", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	ТЗТранспорт = Новый ТаблицаЗначений;
	ТЗТранспорт.Колонки.Добавить("МаркаТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МодельТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("РегНомерТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МаркаПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МодельПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("РегНомерПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	ТЗГрафикОплаты = Новый ТаблицаЗначений;
	ТЗГрафикОплаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗГрафикОплаты.Колонки.Добавить("ФормаОплаты", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрафикОплаты.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100))); 
	ТЗГрафикОплаты.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200))); 
	ТЗГрафикОплаты.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12,2))); 
	
	ТЗТочкиМаршрута = Новый ТаблицаЗначений;
	ТЗТочкиМаршрута.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗТочкиМаршрута.Колонки.Добавить("Время", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТЗТочкиМаршрута.Колонки.Добавить("Действие", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗТочкиМаршрута.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	ТЗТочкиМаршрута.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТЗТочкиМаршрута.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,6)));
	ТЗТочкиМаршрута.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,6)));
	
	ТЗГрузы = Новый ТаблицаЗначений;
	ТЗГрузы.Колонки.Добавить("uid_ТочкиМаршрута", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТЗГрузы.Колонки.Добавить("ГрузНаименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));	
	ТЗГрузы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));	
	ТЗГрузы.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрузы.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));	
	ТЗГрузы.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Ширина", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Высота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТЗГрузы.Колонки.Добавить("ADR", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ТЗГрузы.Колонки.Добавить("ОсобыеТребования", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	
	СтруктураЗаявки = Новый Структура;
	СтруктураЗаявки.Вставить("CMR",);
	СтруктураЗаявки.Вставить("T1");
	СтруктураЗаявки.Вставить("TIR");
	СтруктураЗаявки.Вставить("Валюта");
	СтруктураЗаявки.Вставить("Водители", ТЗВодители);
	СтруктураЗаявки.Вставить("ГрафикОплаты", ТЗГрафикОплаты);
	СтруктураЗаявки.Вставить("Грузоподъемность");
	СтруктураЗаявки.Вставить("ДатаДокумента");
	СтруктураЗаявки.Вставить("Договор");
	СтруктураЗаявки.Вставить("ДополнительныеУсловия");
	СтруктураЗаявки.Вставить("Контрагент");
	СтруктураЗаявки.Вставить("МедКнижкаВодителя");
	СтруктураЗаявки.Вставить("НомерДокумента");
	СтруктураЗаявки.Вставить("Организация");
	СтруктураЗаявки.Вставить("ОснованиеПредставителяКонтрагента");
	СтруктураЗаявки.Вставить("ОснованиеПредставителяОрганизации");
	СтруктураЗаявки.Вставить("ОсобыеУсловияОплаты");
	СтруктураЗаявки.Вставить("ПредставительКонтрагента");
	СтруктураЗаявки.Вставить("ПредставительОрганизации");
	СтруктураЗаявки.Вставить("Примечание");
	СтруктураЗаявки.Вставить("Прочее");
	СтруктураЗаявки.Вставить("РольКонтрагента");
	СтруктураЗаявки.Вставить("СанКнижкаТС");
	СтруктураЗаявки.Вставить("ТипДокумента");
	СтруктураЗаявки.Вставить("ТипКузова");
	СтруктураЗаявки.Вставить("ШтрафныеСанкцииИОтветственность");
	СтруктураЗаявки.Вставить("ТипКузова");
	СтруктураЗаявки.Вставить("ТочкиМаршрута", ТЗТочкиМаршрута);
	СтруктураЗаявки.Вставить("Грузы", ТЗГрузы);
	СтруктураЗаявки.Вставить("Транспорт", ТЗТранспорт);
	СтруктураЗаявки.Вставить("Водители", ТЗВодители);
	
	Возврат СтруктураЗаявки;
	
КонецФункции

Функция ВыполнитьРазборФайла(ПутьКФайлу) Экспорт
	
	Расширение = РаботаСФайлами.ПолучитьРасширениеФайла(ПутьКФайлу);
	
	ЧтениеXML = Новый ЧтениеXML;

	Если НРег(Расширение) = "zip" Тогда
		МаксРазмер = 0;
		#Если Клиент Тогда
		ИмяВременногоКаталога = РабочийКаталогДанныхПользователя()+Строка(Новый УникальныйИдентификатор);
		СоздатьКаталог(ИмяВременногоКаталога);
		РаспаковатьАрхивРекурсивно(ПутьКФайлу, ИмяВременногоКаталога);
		МассивФайлов = НайтиФайлы(ИмяВременногоКаталога, "*.xml");
		Для Каждого НайденныйФайл Из МассивФайлов Цикл
			//пока тупо по размеру ищем
			Если НайденныйФайл.Размер()>МаксРазмер Тогда
				ПутьКФайлу = НайденныйФайл.ПолноеИмя;
				МаксРазмер = НайденныйФайл.Размер();
			КонецЕсли;
		КонецЦикла;
		#КонецЕсли
	
		Если МаксРазмер=0 Тогда
			//видимо ничего путного не нашли или не искали
			Сообщить("Файлов для загрузки не обнаружено");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
	    Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЭлектронныеДокументыВнутренний.СформироватьДеревоРазбора(ПутьКФайлу);
	
КонецФункции
	
Функция СоздатьБанковскийСчет(Владелец, ИмяРеквизита, ПараметрыОбъекта)
	
	СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	СчетОбъект.Владелец = Владелец;
	СчетОбъект.Наименование = "Основной р/с";
	СчетОбъект.НомерСчета = ПараметрыОбъекта[ИмяРеквизита+"Счет"];  
	СчетОбъект.ВидСчета = "Расчетный";
	СчетОбъект.ВалютаДенежныхСредств = ПараметрыОбъекта.Валюта;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		Сообщить("Ошибка записи банковского счета для "+ИмяРеквизита);
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СчетОбъект.Ссылка;
	
КонецФункции

Функция ТекстЗапросаПоискАкта()
	
	Возврат "ВЫБРАТЬ
	        |	&Номер,
	        |	&Дата,
	        |	&КонтрагентИНН,
	        |	&КонтрагентКПП,
	        |	&ОрганизацияИНН,
	        |	&ОрганизацияКПП
	        |ПОМЕСТИТЬ ВходныеПераметры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВходныеПераметры.Номер,
	        |	ВходныеПераметры.Дата,
	        |	ВходныеПераметры.КонтрагентИНН,
	        |	ВходныеПераметры.КонтрагентКПП,
	        |	ВходныеПераметры.ОрганизацияИНН,
	        |	ВходныеПераметры.ОрганизацияКПП,
	        |	Организации.Ссылка КАК Организация
	        |ПОМЕСТИТЬ ПоискОрганизации
	        |ИЗ
	        |	ВходныеПераметры КАК ВходныеПераметры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	        |		ПО ВходныеПераметры.ОрганизацияИНН = Организации.ИНН
	        |			И ВходныеПераметры.ОрганизацияКПП = Организации.КПП
	        |			И (НЕ Организации.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизации.Номер,
	        |	ПоискОрганизации.Дата,
	        |	ПоискОрганизации.КонтрагентИНН,
	        |	ПоискОрганизации.КонтрагентКПП,
	        |	ПоискОрганизации.ОрганизацияИНН,
	        |	ПоискОрганизации.ОрганизацияКПП,
	        |	ПоискОрганизации.Организация,
	        |	Контрагенты.Ссылка КАК Контрагент
	        |ПОМЕСТИТЬ ПоискКонтрагента
	        |ИЗ
	        |	ПоискОрганизации КАК ПоискОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	        |		ПО ПоискОрганизации.КонтрагентИНН = Контрагенты.ИНН
	        |			И ПоискОрганизации.КонтрагентКПП = Контрагенты.КПП
	        |			И (НЕ Контрагенты.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	ПоступлениеТоваровУслуг.Ссылка КАК Документ
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	        |		ПО (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	        |			И ПоискКонтрагента.Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента
	        |			И ПоискКонтрагента.Контрагент = ПоступлениеТоваровУслуг.Контрагент
	        |			И ПоискКонтрагента.Организация = ПоступлениеТоваровУслуг.Организация
	        |ГДЕ
	        |	ПоискКонтрагента.Организация ЕСТЬ НЕ NULL 
	        |	И ПоискКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	        |
	        |ОБЪЕДИНИТЬ
	        |
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	ПоступлениеТоваровУслуг.Ссылка
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	        |		ПО (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	        |			И ПоискКонтрагента.Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента
	        |ГДЕ
	        |	(ПоискКонтрагента.Организация ЕСТЬ NULL 
	        |			ИЛИ ПоискКонтрагента.Контрагент ЕСТЬ NULL )";

	
КонецФункции

Функция ТекстЗапросаПоискСчетаФактуры()
	
	Возврат "ВЫБРАТЬ
	        |	&Номер,
	        |	&Дата,
	        |	&КонтрагентИНН,
	        |	&КонтрагентКПП,
	        |	&ОрганизацияИНН,
	        |	&ОрганизацияКПП
	        |ПОМЕСТИТЬ ВходныеПераметры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВходныеПераметры.Номер,
	        |	ВходныеПераметры.Дата,
	        |	ВходныеПераметры.КонтрагентИНН,
	        |	ВходныеПераметры.КонтрагентКПП,
	        |	ВходныеПераметры.ОрганизацияИНН,
	        |	ВходныеПераметры.ОрганизацияКПП,
	        |	Организации.Ссылка КАК Организация
	        |ПОМЕСТИТЬ ПоискОрганизации
	        |ИЗ
	        |	ВходныеПераметры КАК ВходныеПераметры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	        |		ПО ВходныеПераметры.ОрганизацияИНН = Организации.ИНН
	        |			И ВходныеПераметры.ОрганизацияКПП = Организации.КПП
	        |			И (НЕ Организации.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизации.Номер,
	        |	ПоискОрганизации.Дата,
	        |	ПоискОрганизации.КонтрагентИНН,
	        |	ПоискОрганизации.КонтрагентКПП,
	        |	ПоискОрганизации.ОрганизацияИНН,
	        |	ПоискОрганизации.ОрганизацияКПП,
	        |	ПоискОрганизации.Организация,
	        |	Контрагенты.Ссылка КАК Контрагент
	        |ПОМЕСТИТЬ ПоискКонтрагента
	        |ИЗ
	        |	ПоискОрганизации КАК ПоискОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	        |		ПО ПоискОрганизации.КонтрагентИНН = Контрагенты.ИНН
	        |			И ПоискОрганизации.КонтрагентКПП = Контрагенты.КПП
	        |			И (НЕ Контрагенты.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	СчетФактураПолученный.Ссылка КАК Документ
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	        |		ПО (НЕ СчетФактураПолученный.ПометкаУдаления)
	        |			//И (СчетФактураПолученный.Проведен)
	        |			И ПоискКонтрагента.Номер = СчетФактураПолученный.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = СчетФактураПолученный.ДатаВходящегоДокумента
	        |			И ПоискКонтрагента.Контрагент = СчетФактураПолученный.Контрагент
	        |			И ПоискКонтрагента.Организация = СчетФактураПолученный.Организация
	        |ГДЕ
	        |	ПоискКонтрагента.Организация ЕСТЬ НЕ NULL 
	        |	И ПоискКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	        |
	        |ОБЪЕДИНИТЬ
	        |
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	СчетФактураПолученный.Ссылка
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	        |		ПО (НЕ СчетФактураПолученный.ПометкаУдаления)
	        |			//И (СчетФактураПолученный.Проведен)
	        |			И ПоискКонтрагента.Номер = СчетФактураПолученный.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = СчетФактураПолученный.ДатаВходящегоДокумента
	        |ГДЕ
	        |	ПоискКонтрагента.Организация ЕСТЬ NULL 
	        |	ИЛИ ПоискКонтрагента.Контрагент ЕСТЬ NULL ";
	
КонецФункции

Функция ТекстЗапросаПоискПлатежногоПоручения()
	
	Возврат "ВЫБРАТЬ
	        |	&Номер,
	        |	&Дата,
	        |	&КонтрагентИНН,
	        |	&КонтрагентКПП,
	        |	&КонтрагентСчет,
	        |	&ОрганизацияИНН,
	        |	&ОрганизацияКПП,
	        |	&ОрганизацияСчет
	        |ПОМЕСТИТЬ ВходныеПераметры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВходныеПераметры.Номер,
	        |	ВходныеПераметры.Дата,
	        |	ВходныеПераметры.КонтрагентИНН,
	        |	ВходныеПераметры.КонтрагентКПП,
	        |	ВходныеПераметры.КонтрагентСчет,
	        |	ВходныеПераметры.ОрганизацияИНН,
	        |	ВходныеПераметры.ОрганизацияКПП,
	        |	ВходныеПераметры.ОрганизацияСчет,
	        |	Организации.Ссылка КАК Организация
	        |ПОМЕСТИТЬ ПоискОрганизации
	        |ИЗ
	        |	ВходныеПераметры КАК ВходныеПераметры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	        |		ПО ВходныеПераметры.ОрганизацияИНН = Организации.ИНН
	        |			И ВходныеПераметры.ОрганизацияКПП = Организации.КПП
	        |			И (НЕ Организации.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизации.Номер,
	        |	ПоискОрганизации.Дата,
	        |	ПоискОрганизации.КонтрагентИНН,
	        |	ПоискОрганизации.КонтрагентКПП,
	        |	ПоискОрганизации.КонтрагентСчет,
	        |	ПоискОрганизации.ОрганизацияИНН,
	        |	ПоискОрганизации.ОрганизацияКПП,
	        |	ПоискОрганизации.ОрганизацияСчет,
	        |	ПоискОрганизации.Организация,
	        |	БанковскиеСчета.Ссылка КАК СчетОрганизации
	        |ПОМЕСТИТЬ ПоискОрганизацииСчета
	        |ИЗ
	        |	ПоискОрганизации КАК ПоискОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	        |		ПО ПоискОрганизации.Организация = БанковскиеСчета.Владелец
	        |			И (ПоискОрганизации.ОрганизацияСчет ПОДОБНО БанковскиеСчета.НомерСчета)
	        |			И (НЕ БанковскиеСчета.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизацииСчета.Номер,
	        |	ПоискОрганизацииСчета.Дата,
	        |	ПоискОрганизацииСчета.КонтрагентИНН,
	        |	ПоискОрганизацииСчета.КонтрагентКПП,
	        |	ПоискОрганизацииСчета.КонтрагентСчет,
	        |	ПоискОрганизацииСчета.ОрганизацияИНН,
	        |	ПоискОрганизацииСчета.ОрганизацияКПП,
	        |	ПоискОрганизацииСчета.ОрганизацияСчет,
	        |	ПоискОрганизацииСчета.Организация,
	        |	ПоискОрганизацииСчета.СчетОрганизации,
	        |	Контрагенты.Ссылка КАК Контрагент
	        |ПОМЕСТИТЬ ПоискКонтрагента
	        |ИЗ
	        |	ПоискОрганизацииСчета КАК ПоискОрганизацииСчета
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	        |		ПО ПоискОрганизацииСчета.КонтрагентИНН = Контрагенты.ИНН
	        |			И ПоискОрганизацииСчета.КонтрагентКПП = Контрагенты.КПП
	        |			И (НЕ Контрагенты.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.КонтрагентСчет,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.ОрганизацияСчет,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.СчетОрганизации,
	        |	ПоискКонтрагента.Контрагент,
	        |	БанковскиеСчета.Ссылка КАК СчетКонтрагента
	        |ПОМЕСТИТЬ ПоискКонтрагентаСчета
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	        |		ПО (НЕ БанковскиеСчета.ПометкаУдаления)
	        |			И ПоискКонтрагента.Контрагент = БанковскиеСчета.Владелец
	        |			И (ПоискКонтрагента.КонтрагентСчет ПОДОБНО БанковскиеСчета.НомерСчета)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагентаСчета.Номер,
	        |	ПоискКонтрагентаСчета.Дата,
	        |	ПоискКонтрагентаСчета.КонтрагентИНН,
	        |	ПоискКонтрагентаСчета.КонтрагентКПП,
	        |	ПоискКонтрагентаСчета.КонтрагентСчет,
	        |	ПоискКонтрагентаСчета.ОрганизацияИНН,
	        |	ПоискКонтрагентаСчета.ОрганизацияКПП,
	        |	ПоискКонтрагентаСчета.ОрганизацияСчет,
	        |	ПоискКонтрагентаСчета.Организация,
	        |	ПоискКонтрагентаСчета.СчетОрганизации,
	        |	ПоискКонтрагентаСчета.Контрагент,
	        |	ПоискКонтрагентаСчета.СчетКонтрагента,
	        |	ПлатежноеПоручение.Ссылка КАК Документ
	        |ИЗ
	        |	ПоискКонтрагентаСчета КАК ПоискКонтрагентаСчета
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	        |		ПО (НЕ ПлатежноеПоручение.ПометкаУдаления)
	        |			И ПоискКонтрагентаСчета.Контрагент = ПлатежноеПоручение.Контрагент
	        |			И ПоискКонтрагентаСчета.Организация = ПлатежноеПоручение.Организация
	        |			И (ПоискКонтрагентаСчета.Дата = НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, ДЕНЬ))";
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с агентом

Функция Получить_ATI_Docs_Agent_Catalog(Организация) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Строка) КАК ATI_Docs_Agent_Catalog
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Организация
	|	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства
	|	И СвойстваОбъектов.Наименование = ""ATI_Docs_Agent_Catalog""";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НазначениеСвойства", ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КаталогВременныхФайлов();
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].ATI_Docs_Agent_Catalog;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//Работа с архивами

Процедура РаспаковатьАрхивРекурсивно(ПутьКФайлу, ИмяВременногоКаталога) Экспорт
	ЧтениеЗИП = Новый ЧтениеZipФайла(ПутьКФайлу);
	Для Каждого Файл Из ЧтениеЗИП.Элементы Цикл
		ЧтениеЗИП.Извлечь(Файл, ИмяВременногоКаталога);
		Если Файл.Расширение = "zip" Тогда
			РаспаковатьАрхивРекурсивно(ИмяВременногоКаталога+"\"+Файл.ПолноеИмя, ИмяВременногоКаталога);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьАктАТИ(СтруктураРазбора, ИдентификаторДокумента, ПодписьИсполнителя = "", ПодписьЗаказчика = "") Экспорт
	
	КоличествоЭкземпляров = 1;
	НаПринтер = Ложь;
	
	ЭтоУСН = Ложь; //(Шапка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;	
	
	//ЗапросУслуги = Новый Запрос;
	//ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	//ЗапросУслуги.Текст = "
	//|ВЫБРАТЬ
	//|	Номенклатура КАК Номенклатура,
	//|	Номенклатура.НаименованиеПолное КАК Товар,
	//|	Количество,
	//|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	Цена,
	//|	Сумма,
	//|	СтавкаНДС,
	//|	СуммаНДС
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	//|
	//|ГДЕ
	//|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	//|";
	//ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
		
	СведенияОбОрганизации = Новый Структура;
	СведенияОбОрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияОбОрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияОбОрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияОбОрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияОбОрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияОбОрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	СведенияОбОрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));
	СведенияОбОрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияОбОрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияОбОрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));
		
	ДанныеЗаполненияШапки = Новый Структура;	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));
	ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ОписаниеВыполненныхРабот"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
		
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &Код";
	Запрос.УстановитьПараметр("Код", ДанныеЗаполненияШапки.КодВалюты);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", мВалютаРегламентированногоУчета);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", РезультатЗапроса.Выгрузить()[0].Ссылка);
	КонецЕсли;
	
	ИдентификаторФайла = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	
	ТЗРабот = Новый ТаблицаЗначений;
	ТЗРабот.Колонки.Добавить("НомерСтроки");
	ТЗРабот.Колонки.Добавить("НаименованиеРабот");
	ТЗРабот.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗРабот.Колонки.Добавить("Количество");
	ТЗРабот.Колонки.Добавить("Цена");
	ТЗРабот.Колонки.Добавить("Сумма");
	ТЗРабот.Колонки.Добавить("СуммаНДС");
	ТЗРабот.Колонки.Добавить("СуммаСНДС");
	ТЗРабот.Колонки.Добавить("Описание");
	
	СтрокиТЧОписанийРабот = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СписокОписаний"));
	Для Каждого СтрокаТЧОписанийРабот Из СтрокиТЧОписанийРабот Цикл
		
		ОписаниеРабот = СтрокаТЧОписанийРабот.ЗначениеРеквизита;
		НачалоРабот = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "НачРабот");
		КонецРабот = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "КонРабот");
		Сумма = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "Сумма");
		СуммаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "СуммаНДС");
		СуммаСНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "СуммаСНДС");
		
		СтрокиТЧРабот = ОписаниеРабот.Строки.НайтиСтроки(Новый Структура("Реквизит", "Работа"));
		Для Каждого СтрокаТЧРабот Из СтрокиТЧРабот Цикл
			НоваяСтрока = ТЗРабот.Добавить();
			НоваяСтрока.НомерСтроки = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот,
			"Номер");
			НоваяСтрока.НаименованиеРабот = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот,
			"Номенклатура.Наименование");
			НоваяСтрока.Описание = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Описание");
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот,
			"ЕдиницаИзмеренияНаименование");
			НоваяСтрока.Количество = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Количество");
			НоваяСтрока.Цена = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Цена");
			НоваяСтрока.Сумма = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Сумма");
			НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "СуммаНДС");
			НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "СуммаСНДС");
		КонецЦикла;
	КонецЦикла;
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Акт");
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеЗаполненияШапки.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеЗаполненияШапки.Дата, "ДФ='дд ММММ гггг'"));
	
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	//ОбластьМакета.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
	//ОбластьМакета.Параметры.ИдентификаторФайла = ИдентификаторФайла;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	НомерСтроки = 0;
	Для Каждого СтрокаТабличнойЧасти Из ТЗРабот Цикл	
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	Если ТЗРабот <> Неопределено И ТЗРабот.Количество()>0 Тогда
		Сумма    = ТЗРабот.Итог("Сумма");
		СуммаНДС = ТЗРабот.Итог("СуммаНДС");
	Иначе
		Сумма    = 0;
		СуммаНДС = 0;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	Если СуммаНДС>0 Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	СуммаКПрописи = Сумма;
	
	////////////////////////////////////////////////////////////////	
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	Если СуммаНДС=0 Тогда
		Основание = ". НДС не облагается.";
	Иначе
		Основание = ", в т.ч.:НДС - " + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, ДанныеЗаполненияШапки.ВалютаДокумента);
	КонецЕсли;
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Всего оказано услуг на сумму: %1%2",
		ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеЗаполненияШапки.ВалютаДокумента), Основание);
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Стороны");
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = СведенияОбОрганизации.ПолноеНаименование+Символы.ПС+
	"ИНН "+СведенияОбОрганизации.ИНН+Символы.ПС+
	?(ЗначениеЗаполнено(СведенияОбОрганизации.КПП), "КПП "+СведенияОбОрганизации.КПП+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес),"Юридический адрес "+СведенияОбОрганизации.ЮридическийАдрес+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОбОрганизации.ФактическийАдрес), "Фактический адрес "+СведенияОбОрганизации.ФактическийАдрес, "")
	;
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = СведенияОКонтрагенте.ПолноеНаименование+Символы.ПС+
	"ИНН "+СведенияОКонтрагенте.ИНН+Символы.ПС+
	?(ЗначениеЗаполнено(СведенияОКонтрагенте.КПП), "КПП "+СведенияОКонтрагенте.КПП+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОКонтрагенте.ЮридическийАдрес),"Юридический адрес "+СведенияОКонтрагенте.ЮридическийАдрес+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОКонтрагенте.ФактическийАдрес), "Фактический адрес "+СведенияОКонтрагенте.ФактическийАдрес, "")
	;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("АТИ_Доки");
	ОбластьМакета.Параметры.АТИ_Доки = "Документ передан через систему ЭДО ""АТИ-Доки""";
	ОбластьМакета.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
	ОбластьМакета.Параметры.ИдентификаторФайла = ИдентификаторФайла;
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Если ЗначениеЗаполнено(ПодписьИсполнителя) Тогда
		ЗаголовокПодписиИсполнителя = "Подпись Исполнителя";
	Иначе
	    ЗаголовокПодписиИсполнителя = "Документ Исполнителем не подписан";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПодписьЗаказчика) Тогда
		ЗаголовокПодписиЗаказчика = "Подпись Заказчика";
	Иначе
	    ЗаголовокПодписиЗаказчика = "Документ Заказчиком не подписан";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ЗаголовокПодписиИсполнителя = ЗаголовокПодписиИсполнителя;
	ОбластьМакета.Параметры.ЗаголовокПодписиЗаказчика = ЗаголовокПодписиЗаказчика;
	
	ОбластьМакета.Параметры.ПредставлениеПодписиИсполнителя = ПодписьИсполнителя;
	ОбластьМакета.Параметры.ПредставлениеПодписиЗаказчика = ПодписьЗаказчика;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СЧЕТА

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",             ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",              ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель",      ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма",             ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",     ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Описание");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если Тип = "Счет" Тогда
				НоваяСтрока.Товар = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
				ИДТовара = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			Иначе
				НоваяСтрока.Товар = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
				ИДТовара = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			КонецЕсли; 
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код   = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Описание = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Описание");
		НоваяСтрока.Артикул          = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		Упаковка                     = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения.Наименование");
		БазоваяЕдиницаИзмерения      = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.БазоваяЕдиница.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество       = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"КоличествоУпаковок");
		НоваяСтрока.Цена             = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма            = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
		СуммаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		Если Не ЗначениеЗаполнено(СуммаНДС) Тогда
			НоваяСтрока.СуммаНДС         = 0;
		Иначе
			НоваяСтрока.СуммаНДС         = СуммаНДС;
		КонецЕсли;
		НоваяСтрока.СтавкаНДС        = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки      = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		
	КонецЦикла;
	
	// ЭтапыОплаты
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
		НоваяСтрока.ДатаПлатежа    = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа   = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",      ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ПрочитатьСтрокиДереваРекурсивно(СтрокиДерева, ТаблицаДопДанных, ИмяРодителя = "")
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" ИЛИ СтрокаДерева.ИмяРеквизита = "Массив" 
			ИЛИ СтрокаДерева.ИмяРеквизита = "Список" ИЛИ СтрокаДерева.ИмяРеквизита = "Нпп"
			ИЛИ СтрокаДерева.ЗначениеРеквизита = "Структура" Тогда
			
			ИмяРодителя = ИмяРодителя + СтрокаДерева.ЗначениеРеквизита;
			ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, ИмяРодителя);
		Иначе
			СтрокаТЗ = ТаблицаДопДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДопДанныеСтрок(ДеревоДопДанных, ИмяЧитаемойТаблицы, ТаблицаВозврата)
	
	СтруктураВозврата = Новый Структура("ЕстьПодписанные, ЕстьНеПодписанные", Ложь, Ложь);
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяЧитаемойТаблицы);
		СтрокиСписка = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиСписка.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("Нпп");
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			Для Каждого СтрокаСписка Из СтрокиСписка[0].Строки Цикл
				ТаблицаДопДанных.Очистить();
				ПрочитатьСтрокиДереваРекурсивно(СтрокаСписка.Строки, ТаблицаДопДанных);
				
				Если ТаблицаДопДанных.Количество() > 0 Тогда
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
					КонецЦикла;
					ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
					СтрокаТЗВозврата = ТаблицаВозврата.Добавить();
					СтрокаТЗВозврата.НомерСтр = СтрокаСписка.ЗначениеРеквизита;
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						Если СтрокаТЗ.ЮридическиЗначимый Тогда
							СтруктураВозврата.ЕстьПодписанные = Истина;
							СтрокаТЗВозврата.ПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.ПодписанныеДанные),
								СтрокаТЗВозврата.ПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						Иначе
							СтруктураВозврата.ЕстьНеПодписанные = Истина;
							СтрокаТЗВозврата.НеПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.НеПодписанныеДанные),
								СтрокаТЗВозврата.НеПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.'");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента% г.'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСчетАТИ(СтруктураРазбора, ИдентификаторДокумента, ПодписьИсполнителя = "", ПодписьЗаказчика = "") Экспорт
	
	КоличествоЭкземпляров = 1;
	НаПринтер = Ложь;
	
	ЭтоУСН = Ложь;
	Тип = "Счет";
	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;	
	
	ИспользоватьРучныеСкидки         = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();
	
	Макет = ПолучитьМакет("СчетАТИ");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);

	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АТИ_Счет";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;
	
	ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);
	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки ТОгда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	ЕстьДопДанные = Ложь;
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		ЕстьДопДанные = Истина;
		
		Если ЕстьСкидки Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	СоответствиеСтавокНДС = Новый Соответствие;
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
			
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = НСтр("ru = 'В т.ч. НДС:'");
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
			
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьДопДанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		КонецЕсли;
		
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ТоварПредставление = ?(ЗначениеЗаполнено(СтрокаТовары.Описание), СтрокаТовары.Описание, СтрокаТовары.Товар);
			ОбластьТовар.Параметры.Товар = ТоварПредставление;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			Если ЕстьСкидки ТОгда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(НомерСтроки), "НомерСтр");
				Если СтрокаТаблицыДД <> Неопределено Тогда
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма = Сумма + СуммаПоСтроке;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			ТаблицаТоварыНДС = ТаблицаТовары.Скопировать( , "СтавкаНДС, СуммаНДС");
			ТаблицаТоварыНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			Для Каждого ТекСтавкаНДС Из ТаблицаТоварыНДС Цикл
				СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.СтавкаНДС, ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				ОбластьДанных.Параметры.НДС = ЭлектронныеДокументыПереопределяемый.ТекстНДСПоСтавке(ТекСтавкаНДС.СтавкаНДС,
					ДанныеПечати.Шапка.ЦенаВключаетНДС);
				ОбластьДанных.Параметры.ВсегоНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЦикла;
			
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				ВсегоСНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);
			Иначе
				ВсегоСНДС = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма + СуммаНДС);
			КонецЕсли;
			
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ВсегоСНДС;
			ТабличныйДокумент.Вывести(ОбластьИтогоСНДС)
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
		Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			Область.Параметры.Заполнить(ТекЭтап);
			Область.Параметры.ТекстНДС = ЭлектронныеДокументыПереопределяемый.СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	//Удалено: artem.b 21.05.2015
	// Подвал с подписями в рамках ЭДО не имеет смысла
	//ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	//ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
	//ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;
	//ТабличныйДокумент.Вывести(ОбластьМакета);
	/// artem.b 21.05.2015
	
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
	
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", "Шапка");
		СтрокиШапки = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиШапки.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			ПрочитатьСтрокиДереваРекурсивно(СтрокиШапки, ТаблицаДопДанных);
			
			Если ТаблицаДопДанных.Количество() > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ДопДанныеШапки_Шапка");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакетаСЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_Строка");
				ОбластьМакетаБезЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_СтрокаБезЭЦП");
				ТаблицаДопДанных.Колонки.Добавить("Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
				КонецЦикла;
				ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					ОбластьМакета = ?(СтрокаТЗ.ЮридическиЗначимый, ОбластьМакетаСЭП, ОбластьМакетаБезЭП);
					ОбластьМакета.Параметры.Заполнить(СтрокаТЗ);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////
	
	ИдентификаторФайла = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");	
	
	ОбластьМакета = Макет.ПолучитьОбласть("АТИ_Доки");
	ОбластьМакета.Параметры.АТИ_Доки = "Документ передан через систему ЭДО ""АТИ-Доки""";
	ОбластьМакета.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
	ОбластьМакета.Параметры.ИдентификаторФайла = ИдентификаторФайла;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Если ЗначениеЗаполнено(ПодписьИсполнителя) Тогда
		ЗаголовокПодписиИсполнителя = "Подпись Исполнителя";
	Иначе
	    ЗаголовокПодписиИсполнителя = "Документ Исполнителем не подписан";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПодписьЗаказчика) Тогда
		ЗаголовокПодписиЗаказчика = "Подпись Заказчика";
	Иначе
	    ЗаголовокПодписиЗаказчика = "Документ Заказчиком не подписан";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ЗаголовокПодписиИсполнителя = ЗаголовокПодписиИсполнителя;
	ОбластьМакета.Параметры.ЗаголовокПодписиЗаказчика = ЗаголовокПодписиЗаказчика;
	
	ОбластьМакета.Параметры.ПредставлениеПодписиИсполнителя = ПодписьИсполнителя;
	ОбластьМакета.Параметры.ПредставлениеПодписиЗаказчика = ПодписьЗаказчика;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ИнициализацияПеременных()
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипЧисло = Новый ОписаниеТипов("Число");
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипДата = Новый ОписаниеТипов("Дата");
	
	Сертификаты = Новый ТаблицаЗначений;
	Сертификаты.Колонки.Добавить("Отпечаток", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(255));
	Сертификаты.Колонки.Добавить("Отпечаток64", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(255));
	Сертификаты.Колонки.Добавить("Наименование", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
	Сертификаты.Колонки.Добавить("ДействителенС", ТипДата);
	Сертификаты.Колонки.Добавить("ДействителенПо", ТипДата);
	Сертификаты.Колонки.Добавить("Тестовый", ТипБулево);
	Сертификаты.Колонки.Добавить("Свойства");
	Сертификаты.Колонки.Добавить("extra"); // доп. свойства, обязательные для подачи заявки в ФНС
	Сертификаты.Колонки.Добавить("СертификатСсылка", Новый ОписаниеТипов("СправочникСсылка.СертификатыЭЦП"));
	Сертификаты.Колонки.Добавить("ОрганизацияСсылка", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Сертификаты.Колонки.Добавить("Удалить", ТипБулево);
	Сертификаты.Колонки.Добавить("Пометка", ТипБулево);
	Сертификаты.Колонки.Добавить("ИНН", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12));
	Сертификаты.Колонки.Добавить("Организация", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Сертификаты.Колонки.Добавить("РеквизитыЗаполнены", ТипБулево);
	
	// Колонки относящиеся к авторизации у оператора ЭДО
	Сертификаты.Колонки.Добавить("token", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Сертификаты.Колонки.Добавить("ЗашифрованныйТокен", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Сертификаты.Колонки.Добавить("СтатусКабинетаВДиадок", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Сертификаты.Колонки.Добавить("СтатусКод", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	Сертификаты.Колонки.Добавить("Box_ID", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Сертификаты.Колонки.Добавить("edo_id", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Сертификаты.Колонки.Добавить("ДатаОкончания", ТипДата);
	Сертификаты.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	///
	
	ОПФ.Колонки.Добавить("id",  ТипЧисло);
	ОПФ.Колонки.Добавить("Наименование",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
	
	Города.Колонки.Добавить("id",  ТипЧисло);
	Города.Колонки.Добавить("Наименование",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
	
	ТипыДокументов.Колонки.Добавить("id",  ТипЧисло);
	ТипыДокументов.Колонки.Добавить("Наименование",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
	
	ТипыТранспорта.Колонки.Добавить("Наименование",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
	
	Отладка = Ложь;
	
КонецПроцедуры

// Функция преобразует строку в Base64-строку.
//
// Параметры
//  Строка  - Строка - входная строка.
//
// Возвращаемое значение:
//   Строка   - строка, закодированная по алгоритму base64.
//
Функция ПолучитьСтрокуBase64(Строка) Экспорт

 ВременныйФайл = ПолучитьИмяВременногоФайла();
 
 ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
 ЗаписьТекста.Записать(Строка);
 ЗаписьТекста.Закрыть();
 
 ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
 СтрокаBase64 = Base64Строка(ДД_Файла);
 
 УдалитьФайлы(ВременныйФайл);
 
 Возврат СтрокаBase64;

КонецФункции // СоздатьСтрокуBase64()

Функция СтрокаВДату(Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Дата") Тогда
		
		Возврат Параметр;
		
	ИначеЕсли ТипЗнч(Параметр)=Тип("Строка") Тогда
		
		Попытка
			Если СтрДлина(Параметр)>10 Тогда
				Возврат Дата(Число(Лев(Параметр, 4)), Число(Сред(Параметр, 6, 2)), Число(Сред(Параметр, 9, 2)), Число(Сред(Параметр, 12, 2)), Число(Сред(Параметр, 15, 2)), Число(Сред(Параметр, 18, 2)));
			Иначе
				Возврат Дата(Число(Лев(Параметр, 4)), Число(Сред(Параметр, 6, 2)), Число(Сред(Параметр, 9, 2)));
			КонецЕсли;
		Исключение
			Сообщить(Параметр);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Дата(1,1,1);
	
КонецФункции

Функция СформироватьИнформациюОбАккаунте(Результат1С, СтруктураСправочники, ВыводитьЛогин = Ложь) Экспорт
	
	Результат = "Информация о пользователе: ";
	Ati_id = Результат1С.Получить("ati_id");
	Если ЗначениеЗаполнено(Ati_id) Тогда
		Результат = Результат + Символы.ПС + "Код АТИ: " + Ati_id;
		UserID = Ati_id;
	КонецЕсли;
	
	Если Отладка ИЛИ ВыводитьЛогин Тогда
		Login = Результат1С.Получить("login");
		Если ЗначениеЗаполнено(Login) Тогда
			Результат = Результат + Символы.ПС + "Логин: " + login;
		КонецЕсли;
	КонецЕсли;
	
	activation = Результат1С.Получить("activation");
	Если ЗначениеЗаполнено(Activation) Тогда
		Результат = Результат + Символы.ПС + "Дата активации: " + Формат(СтрокаВДату(Activation), "ДЛФ=DD");
	КонецЕсли;
	
	inn = Результат1С.Получить("inn");
	Если ЗначениеЗаполнено(inn) Тогда
		Результат = Результат + Символы.ПС + "ИНН: " + Формат(inn, "ЧГ=0");
	КонецЕсли;
	
	OGRN = Результат1С.Получить(ogrn);
	Если ЗначениеЗаполнено(OGRN) Тогда
		Результат = Результат + Символы.ПС + "ОГРН: " + ogrn;
	КонецЕсли;
	
	city = Результат1С["city"];
	
	Если НЕ ПустаяСтрока(city) Тогда
		
		Попытка
			API = ПолучитьФорму("API");
			СтрГород = API.Cities(Число(city));
		Исключение
			СтрГород = city;
		КонецПопытки;
		API = Неопределено;
		
	КонецЕсли;
		
	Если СтрГород <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "Город: " + СтрГород;
	КонецЕсли;
	
	address = Результат1С.Получить("address");
	Если ЗначениеЗаполнено(address) Тогда
		Результат = Результат + Символы.ПС + "Адрес: " + address;
	КонецЕсли;
	
	has_diadoc_cabinet = Результат1С.Получить("has_diadoc_cabinet");
	Если ЗначениеЗаполнено(has_diadoc_cabinet) Тогда
		Результат = Результат + Символы.ПС + "Статус Кабинета Оператора ЭДО: " + ?(has_diadoc_cabinet=Истина, "Зарегистрирован", "Не зарегистрирован");
	Иначе
		Результат = Результат + Символы.ПС + "Статус Кабинета Оператора ЭДО не определен";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСправочники(Результат1С, СтруктураСправочников) Экспорт
	
	Если СтруктураСправочников.Свойство("ОПФ") Тогда
		ОПФ = СтруктураСправочников.ОПФ;
		ОПФ.Очистить();
		ownership_forms = Результат1С.Получить("ownership_forms");
		Если ЗначениеЗаполнено(ownership_forms) Тогда
			Для Каждого Элемент Из ownership_forms Цикл
				СтрОПФ = ОПФ.Добавить();
				СтрОПФ.id = Элемент.Получить("id");
				СтрОПФ.Наименование = Элемент.Получить("name");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСправочников.Свойство("Города") Тогда
		Города = СтруктураСправочников.Города;
		Города.Очистить();
		
		cities = Результат1С.Получить("cities");
		Для Каждого Город Из cities Цикл
			СтрГорода = Города.Добавить();
			Попытка
				СтрГорода.id = Число(СокрЛП(Город.Ключ));
			Исключение
			
			КонецПопытки;
			СтрГорода.Наименование = Город.Значение;
		КонецЦикла;
			
	КонецЕсли;
	
	Если СтруктураСправочников.Свойство("ТипыДокументов") Тогда
		ТипыДокументов = СтруктураСправочников.ТипыДокументов;
		ТипыДокументов.Очистить();
		document_types = Результат1С.Получить("document_types");
		Если ЗначениеЗаполнено(document_types) Тогда
			Для Каждого ТипДокумента Из document_types Цикл
				СтрТип = ТипыДокументов.Добавить();
				СтрТип.Наименование = ТипДокумента;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСправочников.Свойство("ТипыТранспорта") Тогда
		ТипыТранспорта = СтруктураСправочников.ТипыТранспорта;
		ТипыТранспорта.Очистить();
		truck_types = Результат1С.Получить("truck_types");
		Если ЗначениеЗаполнено(truck_types) Тогда
			Для Каждого Элемент Из truck_types Цикл
				СтрТип = ТипыТранспорта.Добавить();
				СтрТип.Наименование = Элемент;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Служебные процедуры и функции

Функция Получить_Код_АТИ(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка)=Тип("СправочникСсылка.Организации") Тогда
		НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка)=Тип("СправочникСсылка.Контрагенты") Тогда
		НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

	Иначе
		НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение КАК Код_АТИ
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка)
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &ОбъектСсылка
	|	И СвойстваОбъектов.НазначениеСвойства = &НазначениеСвойства
	|	И СвойстваОбъектов.Наименование = ""Код_АТИ""";
	
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Код_АТИ;
	КонецЕсли;
	
КонецФункции

Процедура Сохранить_Код_АТИ_Контрагента(Контрагент, ID) Экспорт
	Если ЗначениеЗаполнено(Контрагент) И ID>0 Тогда
		НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
		ИмяСвойства = "Код_АТИ";
		Свойство = ПолучитьСоздатьСвойство(НазначениеСвойства, ИмяСвойства, ТипЧисло);
		МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МЗ.Свойство = Свойство;
		МЗ.Объект = Контрагент;
		МЗ.Значение = ID;
		МЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура Сохранить_Код_АТИ_Документа(Документ, ID) Экспорт
	Если ЗначениеЗаполнено(Документ) И ЗначениеЗаполнено(ID) Тогда
		НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
		ИмяСвойства = "Код_АТИ";
		Свойство = ПолучитьСоздатьСвойство(НазначениеСвойства, ИмяСвойства, ТипСтрока);
		МЗ = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
		МЗ.Свойство = Свойство;
		МЗ.Объект = Документ;
		МЗ.Значение = ID;
		МЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Функция СформироватьIDДокумента(Документ) Экспорт
	
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Префикс = "Act_";
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Префикс = "Bill_";
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Префикс = "Invoice_";
	Иначе	
		Возврат "";
	КонецЕсли;
	
	Возврат Префикс+Строка(Документ.УникальныйИдентификатор())+"_"+СтрЗаменить(СтрЗаменить(Документ.ВерсияДанных, "=", ""),"/","");

КонецФункции

Функция ПолучитьТипДокумента(Документ) Экспорт
	
	Если ТипЗнч(Документ)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат "Акт";
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Возврат "Счет";
	ИначеЕсли ТипЗнч(Документ)=Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат "Счет-фактура";
	Иначе	
		Возврат  "Документ";
	КонецЕсли;

КонецФункции

Функция СоздатьКонтрагента(КонтрагентID, API) Экспорт
	
	КонтрагентСсылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	Если КонтрагентID > 0 Тогда
		КонтрагентСтруктура = API.Account(КонтрагентId);
		
		Если КонтрагентСтруктура = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		КонтрагентОбъект.Наименование = КонтрагентСтруктура["name"];
		
		Если НРег(КонтрагентСтруктура["ownership"]) <> "none" И НРег(КонтрагентСтруктура["name"]) <> "none" Тогда
			КонтрагентОбъект.НаименованиеПолное = КонтрагентСтруктура["ownership"]+" "+КонтрагентСтруктура["name"];
		КонецЕсли;
		
		КонтрагентОбъект.ИНН = Формат(СтрокаВЧисло(КонтрагентСтруктура["inn"]), "ЧГ=0");
		
		Попытка			
			КонтрагентОбъект.Записать()
		Исключение
			
			Сообщить(ОписаниеОшибки())
			
		КонецПопытки;
		
		Сохранить_Код_АТИ_Контрагента(КонтрагентОбъект.Ссылка, КонтрагентID);
		
	КонецЕсли;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Функция СформироватьВременныйКаталог() Экспорт
	ИмяКаталога = КаталогВременныхФайлов()+"\"+(Новый УникальныйИдентификатор());
	КаталогНаДиске = Новый Файл(ИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		УдалитьФайлы(ИмяКаталога, "*");
	Иначе
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	Возврат ИмяКаталога;
КонецФункции

Функция ДобавитьКолонкуДерева(Дерево, Имя, Тип = Неопределено) Экспорт
	
	Если Дерево.Колонки.Найти(Имя) = Неопределено Тогда
		Дерево.Колонки.Добавить(Имя, Тип);
	КонецЕсли;
	
КонецФункции

Функция ПечатьДокумента(ДокументСсылка, ID = Неопределено) Экспорт
	
	Попытка
		//Объект = ДокументСсылка.ПолучитьОбъект();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	
		
		ТабДокумент = ПечатьСФ(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
		
		ТабДокумент = ПечатьСчетаЗаказа(ДокументСсылка);
		
	КонецЕсли; 
	
	Если ID = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Иначе
		ИмяФайла = КаталогВременныхФайлов() + ID + ".pdf";
	КонецЕсли;
	
	ТабДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПечатьАктаОбОказанииУслуг(ДокументСсылка)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Если Ложь Тогда
		ДокументОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	
	ДанныеДляПечати = ДокументОбъект.ПодготовитьДанныеДляПечатиАктаОбОказанииУслуг();
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Шапка          = ДанныеДляПечати.Шапка;
	ТабличнаяЧасть = ДанныеДляПечати.ТабличнаяЧасть;
	
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ДокументОбъект.ПолучитьМакет("Акт");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СведенияОКонтрагенте     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;

	// Вывести табличную часть
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ДанныеДляПечати.ВыводитьКоды Тогда
		ОбластьМакета.Параметры.ИмяКодАртикул = ДанныеДляПечати.ТекстКодАртикул;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);

	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл

		НомерСтроки = НомерСтроки + 1;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
        ОбластьМакета.Параметры.Товар = СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		Если Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			ОбластьМакета.Параметры.Цена  = СтрокаТабличнойЧасти.Сумма / ?(СтрокаТабличнойЧасти.Количество = 0, 1, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	Если ТабличнаяЧасть <> Неопределено Тогда

		Сумма    = ТабличнаяЧасть.Итог("Сумма");
		СуммаНДС = ТабличнаяЧасть.Итог("СуммаНДС");

	Иначе

		Сумма    = 0;
		СуммаНДС = 0;

	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);

	Если Шапка.УчитыватьНДС Тогда

		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если СуммаНДС <> 0 Тогда
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьМакета.Параметры.ВсегоНДС = "-";
			ОбластьМакета.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЕсли;

	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
	                                       + ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ДанныеДляПечати.ВалютаВПодписи);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеДляПечати.ВалютаВПодписи);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации = "" + Шапка.ДолжностьРуководителя + " " + ПредставлениеПоставщика;
	
	ОбластьМакета.Параметры.ЗаместительПоПриказу = Шапка.ФИОРуководителя;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПечатьСФ(ДокументСсылка)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	Если НЕ ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		ОбщиеДанныеДляПечати = ДокументОбъект.ПодготовитьОбщиеДанныеДляПечатиСчетаФактуры();
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если УчетНДС.ПолучитьВерсиюПостановления(ДокументОбъект.Дата) = 1 Тогда
			ТабДокумент = ДокументОбъект.ПечатьСчетаФактуры(ОбщиеДанныеДляПечати);
		Иначе
			ТабДокумент = ДокументОбъект.ПечатьСчетаФактуры1137(ОбщиеДанныеДляПечати);
		КонецЕсли;	
		
	Иначе // Корректировочный счет-фактура
		
		ОбщиеДанныеДляПечати = ДокументОбъект.ПодготовитьОбщиеДанныеДляПечатиКорректировочногоСчетаФактуры();
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Если УчетНДС.ПолучитьВерсиюПостановления(ДокументОбъект.Дата) = 1 Тогда
				ТабДокумент = ДокументОбъект.ПечатьКорректировочногоСчетаФактуры(ОбщиеДанныеДляПечати);
			Иначе
				ТабДокумент = ДокументОбъект.ПечатьКорректировочногоСчетаФактуры1137(ОбщиеДанныеДляПечати);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ложь Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(ДокументСсылка, Тип = "Счет")
	
	Перем ПодразделениеОтветственныхЛиц;
	
	СтруктурнаяЕдиница = ДокументСсылка.СтруктурнаяЕдиница;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Покупатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	ОрганизацияПолучатель КАК Получатель,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("ЗаказПокупателя");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|    1 КАК ID
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество) КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма) КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС) КАК СуммаНДС,
	|		МИНИМУМ(ЗаказПокупателя.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.СчетНаОплатуПокупателю.Товары КАК ЗаказПокупателя
	|	
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|		ЗаказПокупателя.Цена) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	ЗаказПокупателя.Номенклатура.Код КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.БазоваяЕдиницаИзмерения.Наименование,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	ЗаказПокупателя.НомерСтроки,
	|    2
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|    ID,
	|	НомерСтроки";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = Документы.СчетНаОплатуПокупателю.ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИННПолучателя = СведенияОПолучателе.ИНН;
		ОбластьМакета.Параметры.КПППолучателя = СведенияОПолучателе.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	        Банк = ?(НЕ ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов), СтруктурнаяЕдиница.Банк, СтруктурнаяЕдиница.БанкДляРасчетов);
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = ВернутьРасчетныйСчет(СтруктурнаяЕдиница);

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктурнаяЕдиница.ТекстКорреспондента) Тогда
			ТекстКорреспондента = СведенияОПолучателе.НаименованиеДляПечатныхФорм;
			Если ЗначениеЗаполнено(СтруктурнаяЕдиница.БанкДляРасчетов) Тогда
				ТекстКорреспондента = ТекстКорреспондента + " р/с " + СтруктурнаяЕдиница.НомерСчета
				+ " в " + СтруктурнаяЕдиница.Банк + " " + СтруктурнаяЕдиница.Банк.Город;
			КонецЕсли;	
		Иначе
			ТекстКорреспондента = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;		
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ТекстКорреспондента;
		
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОПокупателе     = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата);
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПокупателе, "НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
	
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если СуммаНДС <> 0 Тогда
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
	Иначе
		ОбластьДанных.Параметры.НДС = "Без налога (НДС)";
		ОбластьСуммы.Параметры.ВсегоНДС = "-";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести ИтогоКОплате
	ОбластьНомера = Макет.ПолучитьОбласть("ИтогоКОплате|НомерСтроки");
	ОбластьКодов = Макет.ПолучитьОбласть("ИтогоКОплате|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ИтогоКОплате|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоКОплате|Сумма");
	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	СуммаКОплате = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьСуммы.Параметры.ИтогоКОплате = ОбщегоНазначения.ФорматСумм(СуммаКОплате);
	ТабДокумент.Присоединить(ОбластьСуммы);
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		
		Если Шапка.Получатель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
			
			Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.Дата, ПодразделениеОтветственныхЛиц);
			Руководитель = Руководители.РуководительПредставление;
			Бухгалтер    = Руководители.ГлавныйБухгалтерПредставление;
			
			ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
			ОбластьМакета.Параметры.ФИОБухгалтера   = Бухгалтер;
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчетаПредприниматель");
			
			ФЛ = Шапка.Получатель.ИндивидуальныйПредприниматель;
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДокументСсылка.Дата, Новый Структура("ФизЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Предприниматель = СокрЛП(ДанныеФЛ[0].Фамилия) + " " + Лев(СокрЛП(ДанныеФЛ[0].Имя),1) + ". " + Лев(СокрЛП(ДанныеФЛ[0].Отчество),1) + ".";
			Иначе
				Предприниматель = "";
			КонецЕсли;
			
			ОбластьМакета.Параметры.ФИОПредпринимателя = Предприниматель;
			
		КонецЕсли;
		
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказа()

Функция ПечатьЗаявкиЭкспедирования(ВхДанные) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	Возврат ТабДок;
	
КонецФункции

Функция ВыгрузитьТОРГ12(ДокументСсылка, ЭДСсылка = Неопределено) Экспорт
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);

	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ДокументСсылка.Организация.ИНН);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ДокументСсылка.Контрагент.ИНН);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	НастройкиОбменаЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);
	
	СтруктураПараметров = ЭлектронныеДокументыВнутренний.УдалитьСформироватьТорг12ФНСПоДокументу(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	Если НЕ ЭДСсылка = Неопределено Тогда
		//Переделать на процедуры ОМ..
		СтруктураЭД = СтруктураПараметров.СтруктураЭД;
		Если НЕ ЗначениеЗаполнено(ЭДСсылка) Тогда
			ЭДОбъект = Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
		Иначе
			ЭДОбъект = ЭДСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭДОбъект, СтруктураЭД);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		ЭДОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.ВладелецФайла = ДокументСсылка;
		ЭДОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаМодификацииУниверсальная = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаСоздания = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаФормированияЭДОтправителем = ТекущаяДатаСеанса;
		ЭДОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.Наименование = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.НаименованиеФайла = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.Наименование = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.ПутьКФайлу = СтруктураПараметров.ПолноеИмяФайла;
		ЭДОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
		ЗапросСоглашение = Новый Запрос;
		ЗапросСоглашение.Текст=
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
		//|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = &СтатусСоглашения";
		ЗапросСоглашение.УстановитьПараметр("Контрагент", ДокументСсылка.Контрагент);
		ЗапросСоглашение.УстановитьПараметр("Организация", ДокументСсылка.Организация);
		ЗапросСоглашение.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
		РезультатЗапроса = ЗапросСоглашение.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЭДОбъект.СоглашениеЭД = РезультатЗапроса.Выгрузить()[0].Ссылка;
		КонецЕсли;
		
		//ЭДОбъект.ФайлХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		ЭДОбъект.Записать();
		
		МЗ = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
		МЗ.ПрисоединенныйФайл = ЭДОбъект.Ссылка;
		МЗ.ХранимыйФайл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		МЗ.Записать();
		
		ЭДСсылка = ЭДОбъект.Ссылка;
		//ПрисоединенныеФайлы.ДобавитьФайл();
	КонецЕсли;
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
	
КонецФункции


Процедура ДополнитьФайлПодписантом(ПутьКФайлу, СертификатПодписи, Организация, ИНН = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ПутьКФайлу);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	// Получим тег Подписант для обработки.
	ПодписантDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписант");
	
	ПодписантИП = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ИП");
	Если ПодписантИП.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантИП[0]);
	КонецЕсли;

	ПодписантЮЛ = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ЮЛ");
	Если ПодписантЮЛ.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантЮЛ[0]);
	КонецЕсли;
	
	// Разложим ФИО из сертификата.
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата   = ПараметрыСертификата.Фамилия;
	ИмяСертификата       = ПараметрыСертификата.Имя;
	ОтчествоСертификата  = ПараметрыСертификата.Отчество;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.ДолжностьПоСертификату) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.ДолжностьПоСертификату;
	КонецЕсли;
	
	//ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Организация);
	//ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация);

	ЭтоФизЛицо = (СтрДлина(ИНН) = 12);
	
	ФИОПодписанта = ДокументDOM.СоздатьЭлемент("ФИО");
	
	ФИОПодписанта.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
	ФИОПодписанта.УстановитьАтрибут("Имя",      ИмяСертификата);
	Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
		ФИОПодписанта.УстановитьАтрибут("Отчество", ОтчествоСертификата);
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ИП");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ИП
		//Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 12 Тогда
		//	ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
		//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
		//	
		//	ВызватьИсключение ТекстСообщения;
		//КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННФЛ", ИНН);
		
		ДанныеСвидетельства = "";
		ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(Организация, ДанныеСвидетельства);
		ПодписантИПЮЛ.УстановитьАтрибут("СвГосРегИП", ДанныеСвидетельства);
	Иначе
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ЮЛ");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ЮЛ
		//Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 10 Тогда
		//	ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
		//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
		//	
		//	ВызватьИсключение ТекстСообщения;
		//КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННЮЛ", ИНН);
		ПодписантИПЮЛ.УстановитьАтрибут("Должн", ДолжностьПоСертификату);
	КонецЕсли;
	
	ПодписантИПЮЛ.ДобавитьДочерний(ФИОПодписанта);
	ПодписантDOM[0].ДобавитьДочерний(ПодписантИПЮЛ);
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОБЪЕКТОВ 1С ИЗ XML

Функция ИнициализироватьДеревоНенайденных(ДеревоНенайденных) Экспорт
	
	//ДеревоНенайденных.Колонки.Очистить();
	
	ДобавитьКолонкуДерева(ДеревоНенайденных, "Активно", ТипБулево);
	ДобавитьКолонкуДерева(ДеревоНенайденных, "Представление", ТипСтрока);
	ДобавитьКолонкуДерева(ДеревоНенайденных, "ТипЗначения", ТипСтрока);
	ДобавитьКолонкуДерева(ДеревоНенайденных, "Ссылка");
	ДобавитьКолонкуДерева(ДеревоНенайденных, "Индекс", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ДобавитьКолонкуДерева(ДеревоНенайденных, "Владелец");
	ДобавитьКолонкуДерева(ДеревоНенайденных, "Реквизиты", );
	ДобавитьКолонкуДерева(ДеревоНенайденных, "РеквизитыСтрокой", ТипСтрока);
	
КонецФункции

Функция СоздатьНенайденныеОбъекты(ДеревоРазбора, ДеревоНенайденных, СтрокаДокумента) Экспорт
	
	Для Каждого СтрТип Из ДеревоНенайденных.Строки Цикл
		
		Для Каждого СтрОбъект Из СтрТип.Строки Цикл
			
			Если НЕ СтрОбъект.Активно Тогда
				Продолжить;
			КонецЕсли;
			
			Ссылка = Неопределено;
			
			Если СтрОбъект.ТипЗначения = "СправочникСсылка.Банки" Тогда
				
				Ссылка = СоздатьБанк(СтрОбъект);
				СтрОбъект.Ссылка = Ссылка;
				
				Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
								
			ИначеЕсли СтрОбъект.ТипЗначения = "СправочникСсылка.Контрагенты" Тогда
				
				Ссылка = СоздатьКонтрагентаПоРеквизитам(СтрОбъект);
				СтрОбъект.Ссылка = Ссылка;
				
				Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьСсылкиВПодчиненныхОбъектах(ДеревоРазбора, ДеревоНенайденных, СтрОбъект, "Контрагент", "БанковскийСчетКонтрагента");
				
			ИначеЕсли СтрОбъект.ТипЗначения = "СправочникСсылка.Организации" Тогда	
				
				Ссылка = СоздатьОрганизацию(СтрОбъект);
				СтрОбъект.Ссылка = Ссылка;
				
				Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
			
				ЗаполнитьСсылкиВПодчиненныхОбъектах(ДеревоРазбора, ДеревоНенайденных, СтрОбъект, "Организация", "БанковскийСчетОрганизации");
				
			ИначеЕсли СтрОбъект.ТипЗначения = "СправочникСсылка.БанковскиеСчета" Тогда
				
				Ссылка = СоздатьБанковскийСчетПоРеквизитам(СтрОбъект);
				СтрОбъект.Ссылка = Ссылка;
				
				Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
								
			ИначеЕсли СтрОбъект.ТипЗначения = "СправочникСсылка.КлассификаторЕдиницИзмерения" Тогда
				
				Ссылка = СоздатьЕдиницуИзмерения(СтрОбъект);
				СтрОбъект.Ссылка = Ссылка;
				
				Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
								
			ИначеЕсли СтрОбъект.ТипЗначения = "СправочникСсылка.Номенклатура" Тогда
				
				Ссылка = СоздатьНоменклатуру(СтрОбъект);
				СтрОбъект.Ссылка = Ссылка;
				
				Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
					Продолжить;
				КонецЕсли;
								
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрОбъект.Ссылка = Ссылка;
			Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("ИндексСтроки", СтрОбъект.Индекс), Истина);
			Для Каждого Стр Из Строки Цикл
				Стр.СсылкаНаОбъект = Ссылка;
			КонецЦикла;
			
			// Заменим индекс в структуре реквизитов на ссылку созданного объекта
			Для каждого Стр1 Из ДеревоНенайденных.Строки Цикл
				
				Для Каждого Стр2 Из Стр1.Строки Цикл
					
					Для Каждого Элемент Из Стр2.Реквизиты Цикл
						Если Элемент.Значение = СтрОбъект.Индекс Тогда
							Стр2.Реквизиты.Вставить(Элемент.Ключ, Ссылка);
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецФункции

Функция СоздатьКонтрагентаПоРеквизитам(СтрОбъект)
	
	Объект = Справочники.Контрагенты.СоздатьЭлемент();
	
	Реквизиты = СтрОбъект.Реквизиты;
	
	Объект.Наименование = Реквизиты.ПолноеНаименование;
	Объект.НаименованиеПолное = Реквизиты.ПолноеНаименование;
	Объект.ИНН = Реквизиты.ИНН;
	
	КПП = "";
	Реквизиты.Свойство("КПП", КПП);
	Объект.КПП = КПП;
	
	Попытка
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ЮридическийАдрес_Представление = "";
	Если Реквизиты.Свойство("ЮридическийАдрес_Представление", ЮридическийАдрес_Представление) ИЛИ Реквизиты.Свойство("АдресРегистрации_Представление", ЮридическийАдрес_Представление) Тогда

		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = Объект.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		
		УправлениеКонтактнойИнформацией.ЗаполнитьПоляВЗаписиПоПредставлению(Запись, ЮридическийАдрес_Представление);
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ссылка;
		КонецПопытки;
		
	КонецЕсли;
	
	ФактическийАдрес_Представление = "";
	Если Реквизиты.Свойство("ФактическийАдрес_Представление", ФактическийАдрес_Представление) Тогда

		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = Объект.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		
		УправлениеКонтактнойИнформацией.ЗаполнитьПоляВЗаписиПоПредставлению(Запись, ФактическийАдрес_Представление);
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ссылка;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьОрганизацию(СтрОбъект)
	
	Объект = Справочники.Организации.СоздатьЭлемент();
	
	Реквизиты = СтрОбъект.Реквизиты;
	
	Объект.Наименование = Реквизиты.ПолноеНаименование;
	Объект.НаименованиеПолное = Реквизиты.ПолноеНаименование;
	Объект.ИНН = Реквизиты.ИНН;
	
	КПП = "";
	Реквизиты.Свойство("КПП", КПП);
	Объект.КПП = КПП;
	
	Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	Объект.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
	Объект.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
	
	Попытка
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ЮридическийАдрес_Представление = "";
	Если Реквизиты.Свойство("ЮридическийАдрес_Представление", ЮридическийАдрес_Представление) ИЛИ Реквизиты.Свойство("АдресРегистрации_Представление", ЮридическийАдрес_Представление) Тогда

		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = Объект.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		
		УправлениеКонтактнойИнформацией.ЗаполнитьПоляВЗаписиПоПредставлению(Запись, ЮридическийАдрес_Представление);
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ссылка;
		КонецПопытки;
		
	КонецЕсли;
	
	ФактическийАдрес_Представление = "";
	Если Реквизиты.Свойство("ФактическийАдрес_Представление", ФактическийАдрес_Представление) Тогда

		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = Объект.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		
		УправлениеКонтактнойИнформацией.ЗаполнитьПоляВЗаписиПоПредставлению(Запись, ФактическийАдрес_Представление);
		
		Попытка
			Запись.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Ссылка;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьБанк(СтрОбъект)
	
	Объект = Справочники.Банки.СоздатьЭлемент();
	
	Реквизиты = СтрОбъект.Реквизиты;
	
	Объект.Код = Реквизиты.Код;
	Объект.Наименование = Реквизиты.Наименование;
	Объект.КоррСчет = Реквизиты.КоррСчет;
		
	Попытка
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьБанковскийСчетПоРеквизитам(СтрОбъект)
	
	Перем Владелец;
	
	Объект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	
	Реквизиты = СтрОбъект.Реквизиты;
	
	Если НЕ Реквизиты.Свойство("Владелец", Владелец) ИЛИ НЕ ЗначениеЗаполнено(Владелец) Тогда
		Владелец = СтрОбъект.Владелец;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Объект.Владелец = Владелец;
	Объект.Наименование = "Основной р/с";
	Объект.НомерСчета = Реквизиты.НомерСчета;
	Объект.Банк = Реквизиты.Банк;
	Объект.ВидСчета = "Расчетный";
	Объект.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
	
	Попытка
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьЕдиницуИзмерения(СтрОбъект)
	
	Объект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	
	Реквизиты = СтрОбъект.Реквизиты;
	
	Если КлассификаторЕдиницИзмерения = Неопределено Тогда
		КлассификаторЕдиницИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
	КонецЕсли;
	
	ОбластьКодЧисловой         = КлассификаторЕдиницИзмерения.Области.КодЧисловой;
	ОбластьНаименованиеКраткое = КлассификаторЕдиницИзмерения.Области.НаименованиеКраткое;
	ОбластьНаименованиеПолное  = КлассификаторЕдиницИзмерения.Области.НаименованиеПолное;

	Результат = КлассификаторЕдиницИзмерения.НайтиТекст(Реквизиты.Код,, ОбластьКодЧисловой, Ложь);
	Если Результат <> Неопределено Тогда
		
		НаименованиеКраткое = КлассификаторЕдиницИзмерения.Область(Результат.Верх, ОбластьНаименованиеКраткое.Лево, Результат.Низ, ОбластьНаименованиеКраткое.Право).Текст;
		НаименованиеПолное  = КлассификаторЕдиницИзмерения.Область(Результат.Верх, ОбластьНаименованиеПолное. Лево, Результат.Низ, ОбластьНаименованиеПолное. Право).Текст;

		Объект.Наименование = НаименованиеКраткое;
		Объект.НаименованиеПолное = НаименованиеПолное;

	Иначе
		
		Объект.Наименование = Реквизиты.Наименование;
		Объект.НаименованиеПолное = Реквизиты.Наименование;
		
	КонецЕсли;
	
	Объект.Код = Реквизиты.Код;
			
	Попытка
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат Ссылка;
	
КонецФункции

Функция СоздатьНоменклатуру(СтрОбъект)
	
	Объект = Справочники.Номенклатура.СоздатьЭлемент();
	
	Реквизиты = СтрОбъект.Реквизиты;
	
	Объект.Наименование = Реквизиты.Наименование;
	Реквизиты.Свойство("ЕдиницаИзмерения", Объект.БазоваяЕдиницаИзмерения);
		
	Попытка
		Объект.Записать();
		Ссылка = Объект.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат Ссылка;
	
КонецФункции


Функция ПредставлениеСтруктуры(Структура) Экспорт
	
	Результат = "";
	
	Для Каждого Элемент Из Структура Цикл
		
		Результат = Результат + Элемент.Ключ + ": " + Элемент.Значение + Символы.ПС
		
	КонецЦикла;
	
	Результат = Лев(Результат, СтрДлина(Результат)-1);

	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСсылкиВПодчиненныхОбъектах(ДеревоРазбора, ДеревоНенайденных, СтрОбъект, Реквизит, ПодчиненныйРеквизит)
	
	Строки = ДеревоРазбора.Строки.НайтиСтроки(Новый Структура("ЗначениеРеквизита", СтрОбъект.Индекс), Истина);
	Для Каждого Стр Из Строки Цикл
		
		Если Стр.Реквизит = Реквизит Тогда
			
			Индекс = ПолучитьЗначениеРеквизита(ДеревоРазбора, Стр.Родитель, ПодчиненныйРеквизит);
			Если Индекс <> Неопределено Тогда
				Строка = ДеревоНенайденных.Строки.Найти(Индекс, "Индекс", Истина);
				Если Строка <> Неопределено Тогда
					Строка.Владелец = СтрОбъект.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции



Процедура ВыполнитьРазборЭлектронныхДокументов(Doc_id, ТаблицаВложений, API) Экспорт
	
	Если ТаблицаВложений.Колонки.Найти("СтруктураРазбора") = Неопределено Тогда
		ТаблицаВложений.Колонки.Добавить("СтруктураРазбора");
	КонецЕсли;
	
	Для каждого Стр Из ТаблицаВложений Цикл
		
		Если НРег(Стр.Расширение) <> "xml" И НРег(Стр.Расширение) <> "zip" Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКФайлу = API.GetAttachment(Doc_id, Стр.ФайлID, Стр.Расширение, Стр.ФайлИмя);
		
		Если ПустаяСтрока(ПутьКФайлу) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектФайл = Новый Файл(ПутьКФайлу);
		Если НЕ ОбъектФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураРазбора = ВыполнитьРазборФайла(ПутьКФайлу);
		
		Если СтруктураРазбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
		СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
		
		Стр.Дата = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Дата");
		Стр.Номер = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Номер");
		Стр.ВидЭД = СтрокаОбъекта.ВидЭД;
		
		
		Стр.СтруктураРазбора = СтруктураРазбора;
		
		ДокументСсылка = Неопределено;
		Если Стр.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
			ИЛИ Стр.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			ИмяТаблицы = "ПоступлениеТоваровУслуг";
			
		ИначеЕсли Стр.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда

			ИмяТаблицы = "СчетФактураПолученный";
			
		ИначеЕсли Стр.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда

			ИмяТаблицы = "ПлатежноеПоручение";
			
		КонецЕсли;
		
		ДокументСсылка = НайтиДокументПоДокИД(ИмяТаблицы, Стр.ФайлID);
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			Стр.Документ1С = ДокументСсылка;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, НайденныйДокумент) Экспорт
	
	Отказ = Ложь;
	
	НайденныйДокумент = ?(ЗначениеЗаполнено(НайденныйДокумент), НайденныйДокумент, Неопределено);
	
	Организация = ПолучитьСсылкуРеквизита(ДеревоРазбора, СтрокаОбъекта, "Организация");
	
	ОрганизацияИндекс = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Организация");
	Строка = ДеревоРазбора.Строки.Найти(ОрганизацияИндекс, "ИндексСтроки");
		
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не найдена организация ""%1"" по ИНН <%2>, КПП <%3>",
			ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"),
			ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"),
			ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Организация.КПП"));
			
		Сообщить(ТекстСообщения);	
			
		Отказ = Истина;
    КонецЕсли;
	
	Контрагент = ПолучитьСсылкуРеквизита(ДеревоРазбора, СтрокаОбъекта, "Контрагент");
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Не найден контрагент ""%1"" по ИНН <%2>, КПП <%3>",
			ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"),
			ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"),
			ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
			
		Сообщить(ТекстСообщения);	
			
		Отказ = Истина;
    КонецЕсли;
	
	Если Отказ Тогда
		Возврат НайденныйДокумент;
	КонецЕсли;
	
	Возврат ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, НайденныйДокумент);
	
КонецФункции


Функция СформироватьПлатежноеПоручение(СтруктураРазбора) Экспорт
	
	Результат = Документы.ПлатежноеПоручение.ПустаяСсылка(); //заглушка
	
	Если СтруктураРазбора.Свойство("id") Тогда
		Результат = НайтиДокументПоДокИД("ПлатежноеПоручение", СтруктураРазбора.id);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДокОбъект = Результат.ПолучитьОбъект();
	Иначе
		ДокОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
		ДокОбъект.Дата = ТекущаяДата();
	КонецЕсли;
	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	
	ВходящийДокНомер = "";
	ВходящийДокДата = "";
	
	НачатьТранзакцию();
	ФиксироватьТранзакцию = Истина;
	
	Для Каждого Стр Из СтрокаОбъекта.Строки Цикл
		
		Если Стр.Реквизит = "ИдентификаторДокумента" Тогда
			
			//Непонятно что с ним делать..
			
		ИначеЕсли Стр.Реквизит = "Номер" Тогда
			
			ВходящийДокНомер = Стр.ЗначениеРеквизита;
			
		ИначеЕсли Стр.Реквизит = "Дата" Тогда
			
			ВходящийДокДата = Стр.ЗначениеРеквизита;
			
		ИначеЕсли Стр.Реквизит = "НазначениеПлатежа" Тогда
			
			ДокОбъект.НазначениеПлатежа = Стр.ЗначениеРеквизита;
			
		ИначеЕсли Стр.Реквизит = "ДатаОкончанияДействияСчета" Тогда
			
			//Непонятно что с ним делать..
			
		ИначеЕсли Стр.Реквизит = "Валюта" Тогда
			
			СтрокаВалюты = ДеревоРазбора.Строки.Найти("Валюты", "ТипОбъекта");
			Если СтрокаВалюты <> Неопределено Тогда
				СтрокаВалюта = СтрокаВалюты.Строки.Найти(Стр.ЗначениеРеквизита, "ИндексСтроки");
				Если СтрокаВалюта <> Неопределено Тогда
					ДокОбъект.ВалютаДокумента = СтрокаВалюта.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.Реквизит = "Курс" Тогда
			
			//Непонятно что с ним делать..
			
		ИначеЕсли Стр.Реквизит = "Контрагент" Тогда
			
			СтрокаКонтрагенты = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта");
			Если СтрокаКонтрагенты <> Неопределено Тогда
				СтрокаКонтрагент = СтрокаКонтрагенты.Строки.Найти(Стр.ЗначениеРеквизита, "ИндексСтроки");
				Если СтрокаКонтрагент <> Неопределено Тогда
					
					ДокОбъект.Контрагент = СтрокаКонтрагент.СсылкаНаОбъект;
										
					ДокОбъект.ИННПолучателя = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаКонтрагент, "ИНН");
					ДокОбъект.КПППолучателя = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаКонтрагент, "КПП");
					ДокОбъект.ТекстПолучателя = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаКонтрагент, "ПолноеНаименование");
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.Реквизит = "БанковскийСчетКонтрагента" Тогда
			
			СтрокаБанковскиеСчета = ДеревоРазбора.Строки.Найти("БанковскиеСчетаКонтрагентов", "ТипОбъекта");
			Если СтрокаБанковскиеСчета <> Неопределено Тогда
				СтрокаБанковскийСчет = СтрокаБанковскиеСчета.Строки.Найти(Стр.ЗначениеРеквизита, "ИндексСтроки");
				Если СтрокаБанковскийСчет <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаБанковскийСчет.СсылкаНаОбъект) Тогда
						ДокОбъект.СчетКонтрагента = СтрокаБанковскийСчет.СсылкаНаОбъект;
					Иначе
						НомерСчета = "";
						Владелец = Справочники.Контрагенты.ПустаяСсылка();
						Банк = Справочники.Банки.ПустаяСсылка();
						Для Каждого Стр Из СтрокаБанковскийСчет.Строки Цикл
							Если Стр.Реквизит = "НомерСчета" Тогда
								НомерСчета = Стр.ЗначениеРеквизита;
							ИначеЕсли Стр.Реквизит = "Владелец" Тогда
								Владелец = Стр.ЗначениеРеквизита;
							ИначеЕсли Стр.Реквизит = "Банк" Тогда
								Банк = НайтиСоздатьБанк(СтруктураРазбора, Стр.ЗначениеРеквизита);
							КонецЕсли;
						КонецЦикла;
						Если ЗначениеЗаполнено(НомерСчета) И ЗначениеЗаполнено(Владелец) Тогда
							РеквизитыСчета = Новый Структура;
							РеквизитыСчета.Вставить("НомерСчета", НомерСчета);
							РеквизитыСчета.Вставить("Владелец", Владелец);
							РеквизитыСчета.Вставить("Банк", Банк);
							РеквизитыСчета.Вставить("Валюта", ДокОбъект.ВалютаДокумента);
							ДокОбъект.СчетКонтрагента = НайтиСоздатьСчетКонтрагента(РеквизитыСчета);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Стр.Реквизит = "Организация" Тогда
			
			//Если ЗначениеЗаполнено(Стр.СсылкаНаОбъект) Тогда
			//	ДокОбъект.Организация = Стр.СсылкаНаОбъект;
			//Иначе
			//	ФиксироватьТранзакцию = Ложь;
			//	Прервать;
			//КонецЕсли;
			ИНН = "";
			КПП = "";
			ПолноеНаименование = "";
			
			СтрокаОрганизации = ДеревоРазбора.Строки.Найти("Организации", "ТипОбъекта");
			Если СтрокаОрганизации <> Неопределено Тогда
				СтрокаОрганизация = СтрокаОрганизации.Строки.Найти(Стр.ЗначениеРеквизита, "ИндексСтроки");
				Если СтрокаОрганизация <> Неопределено Тогда
					
					Для Каждого Стр Из СтрокаОрганизация.Строки Цикл
						
						Если Стр.Реквизит = "ИНН" Тогда
							ИНН = Стр.ЗначениеРеквизита;
							
						ИначеЕсли Стр.Реквизит = "КПП" Тогда
							КПП = Стр.ЗначениеРеквизита;
							
						ИначеЕсли Стр.Реквизит = "ПолноеНаименование" Тогда	
							ПолноеНаименование = Стр.ЗначениеРеквизита;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ЗначениеЗаполнено(СтрокаОрганизация.СсылкаНаОбъект) Тогда
						ДокОбъект.Организация = СтрокаОрганизация.СсылкаНаОбъект;
					Иначе
						
						Если ЗначениеЗаполнено(ИНН) И ЗначениеЗаполнено(КПП) Тогда
							ДокОбъект.Организация = НайтиОрганизациюПоИНН(ИНН);
						КонецЕсли;
						
					КонецЕсли;
					
					ДокОбъект.ТекстПлательщика = ПолноеНаименование;
					ДокОбъект.ИННПлательщика = ИНН;
					ДокОбъект.КПППлательщика = КПП;
					ДокОбъект.КодОКАТО = ДокОбъект.Организация.КодПоОКАТО;
					
					УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(ДокОбъект.СчетОрганизации, ДокОбъект.Организация, мВалютаРегламентированногоУчета)
					
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокОбъект.Организация) Тогда
				Сообщить("Не найдена организация с ИНН "+ИНН);
				ФиксироватьТранзакцию = Ложь;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли Стр.Реквизит = "СуммаИтог" Тогда
			ДокОбъект.СуммаДокумента = Стр.ЗначениеРеквизита;
		ИначеЕсли Стр.Реквизит = "СуммаДокумента" Тогда
			//с учетом курса???
		ИначеЕсли Стр.Реквизит = "СуммаНалогаИтог" Тогда
			ДокОбъект.СуммаНДС = Стр.ЗначениеРеквизита;
		ИначеЕсли Стр.Реквизит = "ЦенаВключаетНДС" Тогда
			//для ПП без разницы
		ИначеЕсли Стр.Реквизит = "ИтогиПрописью" Тогда
			//для ПП без разницы
		ИначеЕсли Стр.Реквизит = "СтрокаТЧ" Тогда
			//для ПП без разницы
		ИначеЕсли Стр.Реквизит = "Руководитель" Тогда
			//для ПП без разницы
		ИначеЕсли Стр.Реквизит = "Бухгалтер" Тогда
			//для ПП без разницы
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.НазначениеПлатежа) Тогда
		ДокОбъект.НазначениеПлатежа = "Оплата по счету № "+СокрЛП(ВходящийДокНомер)+" от "+Формат(ВходящийДокДата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	ДокОбъект.ВидПлатежа = "Электронно";
	ДокОбъект.ОчередностьПлатежа = 1;
	
	СуммаБезНДС = ДокОбъект.СуммаДокумента - ДокОбъект.СуммаНДС;
	
	Если СуммаБезНДС > 0 И ДокОбъект.СуммаНДС / СуммаБезНДС = 0.18 Тогда
		ДокОбъект.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДокОбъект.ДоговорКонтрагента, ДокОбъект.Контрагент, ДокОбъект.Организация, Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	Если ФиксироватьТранзакцию Тогда
		ДокОбъект.Записать();
		Результат = ДокОбъект.Ссылка;
		
		Сохранить_Код_АТИ_Документа(Результат, СтруктураРазбора.id);
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиОрганизациюПоИНН(ИНН) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		Возврат Выборка[0].Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагентаПоИНН(ИНН) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		Возврат Выборка[0].Контрагент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьСчетКонтрагента(РеквизитыСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета";
	Запрос.УстановитьПараметр("Владелец", РеквизитыСчета.Владелец);
	Запрос.УстановитьПараметр("НомерСчета", РеквизитыСчета.НомерСчета);
	Запрос.УстановитьПараметр("Банк", РеквизитыСчета.Банк);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		Возврат Выборка[0].БанковскийСчет;
	ИначеЕсли Выборка.Количество() = 0 Тогда
		//все по-тяжелой
		СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СчетОбъект.Банк = РеквизитыСчета.Банк;
		СчетОбъект.ВалютаДенежныхСредств = РеквизитыСчета.Валюта;
		СчетОбъект.ВидСчета = "Расчетный";
		СчетОбъект.Владелец = РеквизитыСчета.Владелец;
		СчетОбъект.Наименование = "Основной";
		СчетОбъект.НомерСчета = РеквизитыСчета.НомерСчета;
		СчетОбъект.Записать();
		Возврат СчетОбъект.Ссылка;
	Иначе //больше 2
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьБанк(СтруктураРазбора, Индекс)
	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаБанки = ДеревоРазбора.Строки.Найти("Банки", "ТипОбъекта");
	Если СтрокаБанки <> Неопределено Тогда
		СтрокаБанк = СтрокаБанки.Строки.Найти(Индекс, "ИндексСтроки");
		Если СтрокаБанк <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаБанк.СсылкаНаОбъект) Тогда
				Возврат СтрокаБанк.СсылкаНаОбъект;
			Иначе
				БанкОбъект = Справочники.Банки.СоздатьЭлемент();
				Для Каждого Стр Из СтрокаБанк.Строки Цикл
					Если Стр.Реквизит = "Код" Тогда
						БанкОбъект.Код = Стр.ЗначениеРеквизита;
					ИначеЕсли Стр.Реквизит = "Наименование" Тогда
						БанкОбъект.Наименование = Стр.ЗначениеРеквизита;
					ИначеЕсли Стр.Реквизит = "КоррСчет" Тогда
						БанкОбъект.КоррСчет = Стр.ЗначениеРеквизита;
					КонецЕсли;
				КонецЦикла;
				БанкОбъект.Записать();
				Возврат БанкОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ИнформацияОСертификате(Сертификат) Экспорт
	Результат = "";
	Результат = Результат + "Сертификат выдан: "+ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект)+Символы.ПС;
	Результат = Результат + "Действителен с: "+Сертификат.ДатаНачала+Символы.ПС;
	Результат = Результат + "Действителен по: "+Сертификат.ДатаОкончания+Символы.ПС;
	Возврат Результат;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//Работа с сертификатами

Функция ПолучитьАктивныйСертификат() Экспорт
	
	Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
	Если Массив.Количество() > 0 Тогда
		СтрСертификаты = Массив[0];
		СертификатСсылка = СтрСертификаты.СертификатСсылка;
		
		Возврат СертификатСсылка;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьАктуальныеСертификаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Ссылка,
	|	СертификатыЭЦП.Организация.Наименование КАК Организация,
	|	СертификатыЭЦП.ДатаОкончания
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	НЕ СертификатыЭЦП.ПометкаУдаления
	|	И НЕ СертификатыЭЦП.Отозван";
	
	СписокСертификатов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСертификатов.Добавить(Выборка.Ссылка, ""+Выборка.Организация+" ( действителен до "+Формат(Выборка.ДатаОкончания, "ДФ=dd.MM.yyyy")+")");
	КонецЦикла;
	
	Возврат СписокСертификатов;
	
КонецФункции

Функция ОпределитьОрганизацию(id) Экспорт
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Id) Тогда
		СтруктураИдентификаторов = ПолучитьСтруктуруИдентификатора(ID, "_");
		Если СтруктураИдентификаторов.Свойство("ID") И СтруктураИдентификаторов.Свойство("Префикс") Тогда
			Если СтруктураИдентификаторов.Префикс = "Act" Тогда
				ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураИдентификаторов.ID));
				Если ДокументСсылка.ПолучитьОбъект() <> Неопределено Тогда
					Организация = ДокументСсылка.Организация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

Процедура ОткрытьСтраницуКонтрагента(id) Экспорт
	url="http://www.ati.su/Tables/Info.aspx?ID="+Формат(id, "ЧГ=0");
	ЗапуститьПриложение(url);
КонецПроцедуры


ИнициализацияПеременных();